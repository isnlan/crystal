// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `communication.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:InnerMessage)
pub struct InnerMessage {
    // message oneof groups
    pub content: ::std::option::Option<inner_message::Content>,
    // special fields
    // @@protoc_insertion_point(special_field:InnerMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a InnerMessage {
    fn default() -> &'a InnerMessage {
        <InnerMessage as ::protobuf::Message>::default_instance()
    }
}

impl InnerMessage {
    pub fn new() -> InnerMessage {
        ::std::default::Default::default()
    }

    // bytes RawBytes = 1;

    pub fn RawBytes(&self) -> &[u8] {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::RawBytes(ref v)) => v,
            _ => &[],
        }
    }

    pub fn clear_RawBytes(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_RawBytes(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::RawBytes(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RawBytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = ::std::option::Option::Some(inner_message::Content::RawBytes(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RawBytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(inner_message::Content::RawBytes(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(inner_message::Content::RawBytes(::std::vec::Vec::new()));
        }
        match self.content {
            ::std::option::Option::Some(inner_message::Content::RawBytes(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RawBytes(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_RawBytes() {
            match self.content.take() {
                ::std::option::Option::Some(inner_message::Content::RawBytes(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .Status Status = 2;

    pub fn Status(&self) -> &super::blockchain::Status {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::Status(ref v)) => v,
            _ => <super::blockchain::Status as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_Status(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_Status(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::Status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Status(&mut self, v: super::blockchain::Status) {
        self.content = ::std::option::Option::Some(inner_message::Content::Status(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Status(&mut self) -> &mut super::blockchain::Status {
        if let ::std::option::Option::Some(inner_message::Content::Status(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(inner_message::Content::Status(super::blockchain::Status::new()));
        }
        match self.content {
            ::std::option::Option::Some(inner_message::Content::Status(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Status(&mut self) -> super::blockchain::Status {
        if self.has_Status() {
            match self.content.take() {
                ::std::option::Option::Some(inner_message::Content::Status(v)) => v,
                _ => panic!(),
            }
        } else {
            super::blockchain::Status::new()
        }
    }

    // .RichStatus RichStatus = 3;

    pub fn RichStatus(&self) -> &super::blockchain::RichStatus {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::RichStatus(ref v)) => v,
            _ => <super::blockchain::RichStatus as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_RichStatus(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_RichStatus(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::RichStatus(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_RichStatus(&mut self, v: super::blockchain::RichStatus) {
        self.content = ::std::option::Option::Some(inner_message::Content::RichStatus(v))
    }

    // Mutable pointer to the field.
    pub fn mut_RichStatus(&mut self) -> &mut super::blockchain::RichStatus {
        if let ::std::option::Option::Some(inner_message::Content::RichStatus(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(inner_message::Content::RichStatus(super::blockchain::RichStatus::new()));
        }
        match self.content {
            ::std::option::Option::Some(inner_message::Content::RichStatus(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_RichStatus(&mut self) -> super::blockchain::RichStatus {
        if self.has_RichStatus() {
            match self.content.take() {
                ::std::option::Option::Some(inner_message::Content::RichStatus(v)) => v,
                _ => panic!(),
            }
        } else {
            super::blockchain::RichStatus::new()
        }
    }

    // .SignedProposal SignedProposal = 4;

    pub fn SignedProposal(&self) -> &super::consensus::SignedProposal {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::SignedProposal(ref v)) => v,
            _ => <super::consensus::SignedProposal as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_SignedProposal(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_SignedProposal(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::SignedProposal(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_SignedProposal(&mut self, v: super::consensus::SignedProposal) {
        self.content = ::std::option::Option::Some(inner_message::Content::SignedProposal(v))
    }

    // Mutable pointer to the field.
    pub fn mut_SignedProposal(&mut self) -> &mut super::consensus::SignedProposal {
        if let ::std::option::Option::Some(inner_message::Content::SignedProposal(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(inner_message::Content::SignedProposal(super::consensus::SignedProposal::new()));
        }
        match self.content {
            ::std::option::Option::Some(inner_message::Content::SignedProposal(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_SignedProposal(&mut self) -> super::consensus::SignedProposal {
        if self.has_SignedProposal() {
            match self.content.take() {
                ::std::option::Option::Some(inner_message::Content::SignedProposal(v)) => v,
                _ => panic!(),
            }
        } else {
            super::consensus::SignedProposal::new()
        }
    }

    // .Block Block = 5;

    pub fn Block(&self) -> &super::blockchain::Block {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::Block(ref v)) => v,
            _ => <super::blockchain::Block as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_Block(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_Block(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::Block(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Block(&mut self, v: super::blockchain::Block) {
        self.content = ::std::option::Option::Some(inner_message::Content::Block(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Block(&mut self) -> &mut super::blockchain::Block {
        if let ::std::option::Option::Some(inner_message::Content::Block(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(inner_message::Content::Block(super::blockchain::Block::new()));
        }
        match self.content {
            ::std::option::Option::Some(inner_message::Content::Block(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Block(&mut self) -> super::blockchain::Block {
        if self.has_Block() {
            match self.content.take() {
                ::std::option::Option::Some(inner_message::Content::Block(v)) => v,
                _ => panic!(),
            }
        } else {
            super::blockchain::Block::new()
        }
    }

    // .BlockWithProof BlockWithProof = 6;

    pub fn BlockWithProof(&self) -> &super::blockchain::BlockWithProof {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlockWithProof(ref v)) => v,
            _ => <super::blockchain::BlockWithProof as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BlockWithProof(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_BlockWithProof(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlockWithProof(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BlockWithProof(&mut self, v: super::blockchain::BlockWithProof) {
        self.content = ::std::option::Option::Some(inner_message::Content::BlockWithProof(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BlockWithProof(&mut self) -> &mut super::blockchain::BlockWithProof {
        if let ::std::option::Option::Some(inner_message::Content::BlockWithProof(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(inner_message::Content::BlockWithProof(super::blockchain::BlockWithProof::new()));
        }
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlockWithProof(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BlockWithProof(&mut self) -> super::blockchain::BlockWithProof {
        if self.has_BlockWithProof() {
            match self.content.take() {
                ::std::option::Option::Some(inner_message::Content::BlockWithProof(v)) => v,
                _ => panic!(),
            }
        } else {
            super::blockchain::BlockWithProof::new()
        }
    }

    // .BlockHeader BlockHeader = 7;

    pub fn BlockHeader(&self) -> &super::blockchain::BlockHeader {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlockHeader(ref v)) => v,
            _ => <super::blockchain::BlockHeader as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BlockHeader(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_BlockHeader(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlockHeader(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BlockHeader(&mut self, v: super::blockchain::BlockHeader) {
        self.content = ::std::option::Option::Some(inner_message::Content::BlockHeader(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BlockHeader(&mut self) -> &mut super::blockchain::BlockHeader {
        if let ::std::option::Option::Some(inner_message::Content::BlockHeader(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(inner_message::Content::BlockHeader(super::blockchain::BlockHeader::new()));
        }
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlockHeader(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BlockHeader(&mut self) -> super::blockchain::BlockHeader {
        if self.has_BlockHeader() {
            match self.content.take() {
                ::std::option::Option::Some(inner_message::Content::BlockHeader(v)) => v,
                _ => panic!(),
            }
        } else {
            super::blockchain::BlockHeader::new()
        }
    }

    // .BlockTxs BlockTxs = 8;

    pub fn BlockTxs(&self) -> &super::blockchain::BlockTxs {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlockTxs(ref v)) => v,
            _ => <super::blockchain::BlockTxs as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BlockTxs(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_BlockTxs(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlockTxs(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BlockTxs(&mut self, v: super::blockchain::BlockTxs) {
        self.content = ::std::option::Option::Some(inner_message::Content::BlockTxs(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BlockTxs(&mut self) -> &mut super::blockchain::BlockTxs {
        if let ::std::option::Option::Some(inner_message::Content::BlockTxs(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(inner_message::Content::BlockTxs(super::blockchain::BlockTxs::new()));
        }
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlockTxs(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BlockTxs(&mut self) -> super::blockchain::BlockTxs {
        if self.has_BlockTxs() {
            match self.content.take() {
                ::std::option::Option::Some(inner_message::Content::BlockTxs(v)) => v,
                _ => panic!(),
            }
        } else {
            super::blockchain::BlockTxs::new()
        }
    }

    // .BlackList BlackList = 9;

    pub fn BlackList(&self) -> &super::blockchain::BlackList {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlackList(ref v)) => v,
            _ => <super::blockchain::BlackList as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_BlackList(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_BlackList(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlackList(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_BlackList(&mut self, v: super::blockchain::BlackList) {
        self.content = ::std::option::Option::Some(inner_message::Content::BlackList(v))
    }

    // Mutable pointer to the field.
    pub fn mut_BlackList(&mut self) -> &mut super::blockchain::BlackList {
        if let ::std::option::Option::Some(inner_message::Content::BlackList(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(inner_message::Content::BlackList(super::blockchain::BlackList::new()));
        }
        match self.content {
            ::std::option::Option::Some(inner_message::Content::BlackList(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_BlackList(&mut self) -> super::blockchain::BlackList {
        if self.has_BlackList() {
            match self.content.take() {
                ::std::option::Option::Some(inner_message::Content::BlackList(v)) => v,
                _ => panic!(),
            }
        } else {
            super::blockchain::BlackList::new()
        }
    }

    // .StateSignal StateSignal = 10;

    pub fn StateSignal(&self) -> &super::blockchain::StateSignal {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::StateSignal(ref v)) => v,
            _ => <super::blockchain::StateSignal as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_StateSignal(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_StateSignal(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::StateSignal(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_StateSignal(&mut self, v: super::blockchain::StateSignal) {
        self.content = ::std::option::Option::Some(inner_message::Content::StateSignal(v))
    }

    // Mutable pointer to the field.
    pub fn mut_StateSignal(&mut self) -> &mut super::blockchain::StateSignal {
        if let ::std::option::Option::Some(inner_message::Content::StateSignal(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(inner_message::Content::StateSignal(super::blockchain::StateSignal::new()));
        }
        match self.content {
            ::std::option::Option::Some(inner_message::Content::StateSignal(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_StateSignal(&mut self) -> super::blockchain::StateSignal {
        if self.has_StateSignal() {
            match self.content.take() {
                ::std::option::Option::Some(inner_message::Content::StateSignal(v)) => v,
                _ => panic!(),
            }
        } else {
            super::blockchain::StateSignal::new()
        }
    }

    // .CompactSignedProposal CompactSignedProposal = 11;

    pub fn CompactSignedProposal(&self) -> &super::consensus::CompactSignedProposal {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::CompactSignedProposal(ref v)) => v,
            _ => <super::consensus::CompactSignedProposal as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_CompactSignedProposal(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_CompactSignedProposal(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(inner_message::Content::CompactSignedProposal(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_CompactSignedProposal(&mut self, v: super::consensus::CompactSignedProposal) {
        self.content = ::std::option::Option::Some(inner_message::Content::CompactSignedProposal(v))
    }

    // Mutable pointer to the field.
    pub fn mut_CompactSignedProposal(&mut self) -> &mut super::consensus::CompactSignedProposal {
        if let ::std::option::Option::Some(inner_message::Content::CompactSignedProposal(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(inner_message::Content::CompactSignedProposal(super::consensus::CompactSignedProposal::new()));
        }
        match self.content {
            ::std::option::Option::Some(inner_message::Content::CompactSignedProposal(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_CompactSignedProposal(&mut self) -> super::consensus::CompactSignedProposal {
        if self.has_CompactSignedProposal() {
            match self.content.take() {
                ::std::option::Option::Some(inner_message::Content::CompactSignedProposal(v)) => v,
                _ => panic!(),
            }
        } else {
            super::consensus::CompactSignedProposal::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(11);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "RawBytes",
            InnerMessage::has_RawBytes,
            InnerMessage::RawBytes,
            InnerMessage::set_RawBytes,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::blockchain::Status>(
            "Status",
            InnerMessage::has_Status,
            InnerMessage::Status,
            InnerMessage::mut_Status,
            InnerMessage::set_Status,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::blockchain::RichStatus>(
            "RichStatus",
            InnerMessage::has_RichStatus,
            InnerMessage::RichStatus,
            InnerMessage::mut_RichStatus,
            InnerMessage::set_RichStatus,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::consensus::SignedProposal>(
            "SignedProposal",
            InnerMessage::has_SignedProposal,
            InnerMessage::SignedProposal,
            InnerMessage::mut_SignedProposal,
            InnerMessage::set_SignedProposal,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::blockchain::Block>(
            "Block",
            InnerMessage::has_Block,
            InnerMessage::Block,
            InnerMessage::mut_Block,
            InnerMessage::set_Block,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::blockchain::BlockWithProof>(
            "BlockWithProof",
            InnerMessage::has_BlockWithProof,
            InnerMessage::BlockWithProof,
            InnerMessage::mut_BlockWithProof,
            InnerMessage::set_BlockWithProof,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::blockchain::BlockHeader>(
            "BlockHeader",
            InnerMessage::has_BlockHeader,
            InnerMessage::BlockHeader,
            InnerMessage::mut_BlockHeader,
            InnerMessage::set_BlockHeader,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::blockchain::BlockTxs>(
            "BlockTxs",
            InnerMessage::has_BlockTxs,
            InnerMessage::BlockTxs,
            InnerMessage::mut_BlockTxs,
            InnerMessage::set_BlockTxs,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::blockchain::BlackList>(
            "BlackList",
            InnerMessage::has_BlackList,
            InnerMessage::BlackList,
            InnerMessage::mut_BlackList,
            InnerMessage::set_BlackList,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::blockchain::StateSignal>(
            "StateSignal",
            InnerMessage::has_StateSignal,
            InnerMessage::StateSignal,
            InnerMessage::mut_StateSignal,
            InnerMessage::set_StateSignal,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, super::consensus::CompactSignedProposal>(
            "CompactSignedProposal",
            InnerMessage::has_CompactSignedProposal,
            InnerMessage::CompactSignedProposal,
            InnerMessage::mut_CompactSignedProposal,
            InnerMessage::set_CompactSignedProposal,
        ));
        oneofs.push(inner_message::Content::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<InnerMessage>(
            "InnerMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for InnerMessage {
    const NAME: &'static str = "InnerMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.content = ::std::option::Option::Some(inner_message::Content::RawBytes(is.read_bytes()?));
                },
                18 => {
                    self.content = ::std::option::Option::Some(inner_message::Content::Status(is.read_message()?));
                },
                26 => {
                    self.content = ::std::option::Option::Some(inner_message::Content::RichStatus(is.read_message()?));
                },
                34 => {
                    self.content = ::std::option::Option::Some(inner_message::Content::SignedProposal(is.read_message()?));
                },
                42 => {
                    self.content = ::std::option::Option::Some(inner_message::Content::Block(is.read_message()?));
                },
                50 => {
                    self.content = ::std::option::Option::Some(inner_message::Content::BlockWithProof(is.read_message()?));
                },
                58 => {
                    self.content = ::std::option::Option::Some(inner_message::Content::BlockHeader(is.read_message()?));
                },
                66 => {
                    self.content = ::std::option::Option::Some(inner_message::Content::BlockTxs(is.read_message()?));
                },
                74 => {
                    self.content = ::std::option::Option::Some(inner_message::Content::BlackList(is.read_message()?));
                },
                82 => {
                    self.content = ::std::option::Option::Some(inner_message::Content::StateSignal(is.read_message()?));
                },
                90 => {
                    self.content = ::std::option::Option::Some(inner_message::Content::CompactSignedProposal(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &inner_message::Content::RawBytes(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &inner_message::Content::Status(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inner_message::Content::RichStatus(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inner_message::Content::SignedProposal(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inner_message::Content::Block(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inner_message::Content::BlockWithProof(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inner_message::Content::BlockHeader(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inner_message::Content::BlockTxs(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inner_message::Content::BlackList(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inner_message::Content::StateSignal(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &inner_message::Content::CompactSignedProposal(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &inner_message::Content::RawBytes(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &inner_message::Content::Status(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &inner_message::Content::RichStatus(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &inner_message::Content::SignedProposal(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &inner_message::Content::Block(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &inner_message::Content::BlockWithProof(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &inner_message::Content::BlockHeader(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &inner_message::Content::BlockTxs(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &inner_message::Content::BlackList(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
                &inner_message::Content::StateSignal(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(10, v, os)?;
                },
                &inner_message::Content::CompactSignedProposal(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> InnerMessage {
        InnerMessage::new()
    }

    fn clear(&mut self) {
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static InnerMessage {
        static instance: InnerMessage = InnerMessage {
            content: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for InnerMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("InnerMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for InnerMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InnerMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `InnerMessage`
pub mod inner_message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:InnerMessage.content)
    pub enum Content {
        // @@protoc_insertion_point(oneof_field:InnerMessage.RawBytes)
        RawBytes(::std::vec::Vec<u8>),
        // @@protoc_insertion_point(oneof_field:InnerMessage.Status)
        Status(super::super::blockchain::Status),
        // @@protoc_insertion_point(oneof_field:InnerMessage.RichStatus)
        RichStatus(super::super::blockchain::RichStatus),
        // @@protoc_insertion_point(oneof_field:InnerMessage.SignedProposal)
        SignedProposal(super::super::consensus::SignedProposal),
        // @@protoc_insertion_point(oneof_field:InnerMessage.Block)
        Block(super::super::blockchain::Block),
        // @@protoc_insertion_point(oneof_field:InnerMessage.BlockWithProof)
        BlockWithProof(super::super::blockchain::BlockWithProof),
        // @@protoc_insertion_point(oneof_field:InnerMessage.BlockHeader)
        BlockHeader(super::super::blockchain::BlockHeader),
        // @@protoc_insertion_point(oneof_field:InnerMessage.BlockTxs)
        BlockTxs(super::super::blockchain::BlockTxs),
        // @@protoc_insertion_point(oneof_field:InnerMessage.BlackList)
        BlackList(super::super::blockchain::BlackList),
        // @@protoc_insertion_point(oneof_field:InnerMessage.StateSignal)
        StateSignal(super::super::blockchain::StateSignal),
        // @@protoc_insertion_point(oneof_field:InnerMessage.CompactSignedProposal)
        CompactSignedProposal(super::super::consensus::CompactSignedProposal),
    }

    impl ::protobuf::Oneof for Content {
    }

    impl ::protobuf::OneofFull for Content {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::InnerMessage as ::protobuf::MessageFull>::descriptor().oneof_by_name("content").unwrap()).clone()
        }
    }

    impl Content {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Content>("content")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13communication.proto\x1a\x10blockchain.proto\x1a\x0fconsensus.proto\
    \"\xa8\x04\n\x0cInnerMessage\x12\x1c\n\x08RawBytes\x18\x01\x20\x01(\x0cH\
    \0R\x08RawBytes\x12!\n\x06Status\x18\x02\x20\x01(\x0b2\x07.StatusH\0R\
    \x06Status\x12-\n\nRichStatus\x18\x03\x20\x01(\x0b2\x0b.RichStatusH\0R\n\
    RichStatus\x129\n\x0eSignedProposal\x18\x04\x20\x01(\x0b2\x0f.SignedProp\
    osalH\0R\x0eSignedProposal\x12\x1e\n\x05Block\x18\x05\x20\x01(\x0b2\x06.\
    BlockH\0R\x05Block\x129\n\x0eBlockWithProof\x18\x06\x20\x01(\x0b2\x0f.Bl\
    ockWithProofH\0R\x0eBlockWithProof\x120\n\x0bBlockHeader\x18\x07\x20\x01\
    (\x0b2\x0c.BlockHeaderH\0R\x0bBlockHeader\x12'\n\x08BlockTxs\x18\x08\x20\
    \x01(\x0b2\t.BlockTxsH\0R\x08BlockTxs\x12*\n\tBlackList\x18\t\x20\x01(\
    \x0b2\n.BlackListH\0R\tBlackList\x120\n\x0bStateSignal\x18\n\x20\x01(\
    \x0b2\x0c.StateSignalH\0R\x0bStateSignal\x12N\n\x15CompactSignedProposal\
    \x18\x0b\x20\x01(\x0b2\x16.CompactSignedProposalH\0R\x15CompactSignedPro\
    posalB\t\n\x07contentJ\xb9\x05\n\x06\x12\x04\0\0\x13\x01\n\x08\n\x01\x0c\
    \x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\x07\x19\n\t\n\x02\x03\x01\
    \x12\x03\x03\x07\x18\n\n\n\x02\x04\0\x12\x04\x05\0\x13\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x05\x08\x14\n\x0c\n\x04\x04\0\x08\0\x12\x04\x06\x04\x12\
    \x05\n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x06\n\x11\n\x0b\n\x04\x04\0\x02\
    \0\x12\x03\x07\x08\x1b\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x07\x08\r\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x07\x0e\x16\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x07\x19\x1a\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x08\x08\x1a\n\
    \x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x08\x08\x0e\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x08\x0f\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x08\
    \x18\x19\n\x0b\n\x04\x04\0\x02\x02\x12\x03\t\x08\"\n\x0c\n\x05\x04\0\x02\
    \x02\x06\x12\x03\t\x08\x12\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\t\x13\
    \x1d\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\t\x20!\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\n\x08*\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\n\x08\x16\n\
    \x0c\n\x05\x04\0\x02\x03\x01\x12\x03\n\x17%\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03\n()\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x0b\x08\x18\n\x0c\n\
    \x05\x04\0\x02\x04\x06\x12\x03\x0b\x08\r\n\x0c\n\x05\x04\0\x02\x04\x01\
    \x12\x03\x0b\x0e\x13\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x0b\x16\x17\n\
    \x0b\n\x04\x04\0\x02\x05\x12\x03\x0c\x08*\n\x0c\n\x05\x04\0\x02\x05\x06\
    \x12\x03\x0c\x08\x16\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0c\x17%\n\
    \x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0c()\n\x0b\n\x04\x04\0\x02\x06\x12\
    \x03\r\x08$\n\x0c\n\x05\x04\0\x02\x06\x06\x12\x03\r\x08\x13\n\x0c\n\x05\
    \x04\0\x02\x06\x01\x12\x03\r\x14\x1f\n\x0c\n\x05\x04\0\x02\x06\x03\x12\
    \x03\r\"#\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x0e\x08\x1e\n\x0c\n\x05\x04\
    \0\x02\x07\x06\x12\x03\x0e\x08\x10\n\x0c\n\x05\x04\0\x02\x07\x01\x12\x03\
    \x0e\x11\x19\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x0e\x1c\x1d\n\x0b\n\
    \x04\x04\0\x02\x08\x12\x03\x0f\x08\x20\n\x0c\n\x05\x04\0\x02\x08\x06\x12\
    \x03\x0f\x08\x11\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x0f\x12\x1b\n\x0c\
    \n\x05\x04\0\x02\x08\x03\x12\x03\x0f\x1e\x1f\n\x0b\n\x04\x04\0\x02\t\x12\
    \x03\x10\x08%\n\x0c\n\x05\x04\0\x02\t\x06\x12\x03\x10\x08\x13\n\x0c\n\
    \x05\x04\0\x02\t\x01\x12\x03\x10\x14\x1f\n\x0c\n\x05\x04\0\x02\t\x03\x12\
    \x03\x10\"$\n\x0b\n\x04\x04\0\x02\n\x12\x03\x11\x089\n\x0c\n\x05\x04\0\
    \x02\n\x06\x12\x03\x11\x08\x1d\n\x0c\n\x05\x04\0\x02\n\x01\x12\x03\x11\
    \x1e3\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\x1168b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::blockchain::file_descriptor().clone());
            deps.push(super::consensus::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(InnerMessage::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
