// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `blockchain.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Proof)
pub struct Proof {
    // message fields
    // @@protoc_insertion_point(field:Proof.content)
    pub content: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:Proof.type)
    pub type_: ::protobuf::EnumOrUnknown<ProofType>,
    // special fields
    // @@protoc_insertion_point(special_field:Proof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Proof {
    fn default() -> &'a Proof {
        <Proof as ::protobuf::Message>::default_instance()
    }
}

impl Proof {
    pub fn new() -> Proof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "content",
            |m: &Proof| { &m.content },
            |m: &mut Proof| { &mut m.content },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "type",
            |m: &Proof| { &m.type_ },
            |m: &mut Proof| { &mut m.type_ },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Proof>(
            "Proof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Proof {
    const NAME: &'static str = "Proof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.content = is.read_bytes()?;
                },
                16 => {
                    self.type_ = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.content);
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(ProofType::AuthorityRound) {
            my_size += ::protobuf::rt::int32_size(2, self.type_.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.content.is_empty() {
            os.write_bytes(1, &self.content)?;
        }
        if self.type_ != ::protobuf::EnumOrUnknown::new(ProofType::AuthorityRound) {
            os.write_enum(2, ::protobuf::EnumOrUnknown::value(&self.type_))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Proof {
        Proof::new()
    }

    fn clear(&mut self) {
        self.content.clear();
        self.type_ = ::protobuf::EnumOrUnknown::new(ProofType::AuthorityRound);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Proof {
        static instance: Proof = Proof {
            content: ::std::vec::Vec::new(),
            type_: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Proof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Proof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Proof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:BlockHeader)
pub struct BlockHeader {
    // message fields
    // @@protoc_insertion_point(field:BlockHeader.prevhash)
    pub prevhash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:BlockHeader.timestamp)
    pub timestamp: u64,
    // @@protoc_insertion_point(field:BlockHeader.height)
    pub height: u64,
    // @@protoc_insertion_point(field:BlockHeader.state_root)
    pub state_root: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:BlockHeader.transactions_root)
    pub transactions_root: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:BlockHeader.receipts_root)
    pub receipts_root: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:BlockHeader.quota_used)
    pub quota_used: u64,
    // @@protoc_insertion_point(field:BlockHeader.quota_limit)
    pub quota_limit: u64,
    // @@protoc_insertion_point(field:BlockHeader.proof)
    pub proof: ::protobuf::MessageField<Proof>,
    // @@protoc_insertion_point(field:BlockHeader.proposer)
    pub proposer: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:BlockHeader.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BlockHeader {
    fn default() -> &'a BlockHeader {
        <BlockHeader as ::protobuf::Message>::default_instance()
    }
}

impl BlockHeader {
    pub fn new() -> BlockHeader {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(10);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "prevhash",
            |m: &BlockHeader| { &m.prevhash },
            |m: &mut BlockHeader| { &mut m.prevhash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &BlockHeader| { &m.timestamp },
            |m: &mut BlockHeader| { &mut m.timestamp },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &BlockHeader| { &m.height },
            |m: &mut BlockHeader| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "state_root",
            |m: &BlockHeader| { &m.state_root },
            |m: &mut BlockHeader| { &mut m.state_root },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "transactions_root",
            |m: &BlockHeader| { &m.transactions_root },
            |m: &mut BlockHeader| { &mut m.transactions_root },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "receipts_root",
            |m: &BlockHeader| { &m.receipts_root },
            |m: &mut BlockHeader| { &mut m.receipts_root },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quota_used",
            |m: &BlockHeader| { &m.quota_used },
            |m: &mut BlockHeader| { &mut m.quota_used },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quota_limit",
            |m: &BlockHeader| { &m.quota_limit },
            |m: &mut BlockHeader| { &mut m.quota_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Proof>(
            "proof",
            |m: &BlockHeader| { &m.proof },
            |m: &mut BlockHeader| { &mut m.proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposer",
            |m: &BlockHeader| { &m.proposer },
            |m: &mut BlockHeader| { &mut m.proposer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BlockHeader>(
            "BlockHeader",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BlockHeader {
    const NAME: &'static str = "BlockHeader";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.prevhash = is.read_bytes()?;
                },
                16 => {
                    self.timestamp = is.read_uint64()?;
                },
                24 => {
                    self.height = is.read_uint64()?;
                },
                34 => {
                    self.state_root = is.read_bytes()?;
                },
                42 => {
                    self.transactions_root = is.read_bytes()?;
                },
                50 => {
                    self.receipts_root = is.read_bytes()?;
                },
                56 => {
                    self.quota_used = is.read_uint64()?;
                },
                64 => {
                    self.quota_limit = is.read_uint64()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof)?;
                },
                82 => {
                    self.proposer = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.prevhash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.prevhash);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.timestamp);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.height);
        }
        if !self.state_root.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.state_root);
        }
        if !self.transactions_root.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.transactions_root);
        }
        if !self.receipts_root.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.receipts_root);
        }
        if self.quota_used != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.quota_used);
        }
        if self.quota_limit != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.quota_limit);
        }
        if let Some(v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.proposer.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.proposer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.prevhash.is_empty() {
            os.write_bytes(1, &self.prevhash)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(2, self.timestamp)?;
        }
        if self.height != 0 {
            os.write_uint64(3, self.height)?;
        }
        if !self.state_root.is_empty() {
            os.write_bytes(4, &self.state_root)?;
        }
        if !self.transactions_root.is_empty() {
            os.write_bytes(5, &self.transactions_root)?;
        }
        if !self.receipts_root.is_empty() {
            os.write_bytes(6, &self.receipts_root)?;
        }
        if self.quota_used != 0 {
            os.write_uint64(7, self.quota_used)?;
        }
        if self.quota_limit != 0 {
            os.write_uint64(8, self.quota_limit)?;
        }
        if let Some(v) = self.proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        if !self.proposer.is_empty() {
            os.write_bytes(10, &self.proposer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BlockHeader {
        BlockHeader::new()
    }

    fn clear(&mut self) {
        self.prevhash.clear();
        self.timestamp = 0;
        self.height = 0;
        self.state_root.clear();
        self.transactions_root.clear();
        self.receipts_root.clear();
        self.quota_used = 0;
        self.quota_limit = 0;
        self.proof.clear();
        self.proposer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BlockHeader {
        static instance: BlockHeader = BlockHeader {
            prevhash: ::std::vec::Vec::new(),
            timestamp: 0,
            height: 0,
            state_root: ::std::vec::Vec::new(),
            transactions_root: ::std::vec::Vec::new(),
            receipts_root: ::std::vec::Vec::new(),
            quota_used: 0,
            quota_limit: 0,
            proof: ::protobuf::MessageField::none(),
            proposer: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BlockHeader {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BlockHeader").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BlockHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockHeader {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Status)
pub struct Status {
    // message fields
    // @@protoc_insertion_point(field:Status.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:Status.height)
    pub height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:Status.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Status {
    fn default() -> &'a Status {
        <Status as ::protobuf::Message>::default_instance()
    }
}

impl Status {
    pub fn new() -> Status {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &Status| { &m.hash },
            |m: &mut Status| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &Status| { &m.height },
            |m: &mut Status| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Status>(
            "Status",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Status {
    const NAME: &'static str = "Status";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash = is.read_bytes()?;
                },
                16 => {
                    self.height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        if self.height != 0 {
            os.write_uint64(2, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Status {
        Status::new()
    }

    fn clear(&mut self) {
        self.hash.clear();
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Status {
        static instance: Status = Status {
            hash: ::std::vec::Vec::new(),
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Status {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Status").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Status {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:AccountGasLimit)
pub struct AccountGasLimit {
    // message fields
    // @@protoc_insertion_point(field:AccountGasLimit.common_quota_limit)
    pub common_quota_limit: u64,
    // @@protoc_insertion_point(field:AccountGasLimit.specific_quota_limit)
    pub specific_quota_limit: ::std::collections::HashMap<::std::string::String, u64>,
    // special fields
    // @@protoc_insertion_point(special_field:AccountGasLimit.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a AccountGasLimit {
    fn default() -> &'a AccountGasLimit {
        <AccountGasLimit as ::protobuf::Message>::default_instance()
    }
}

impl AccountGasLimit {
    pub fn new() -> AccountGasLimit {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "common_quota_limit",
            |m: &AccountGasLimit| { &m.common_quota_limit },
            |m: &mut AccountGasLimit| { &mut m.common_quota_limit },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_map_simpler_accessor::<_, _, _>(
            "specific_quota_limit",
            |m: &AccountGasLimit| { &m.specific_quota_limit },
            |m: &mut AccountGasLimit| { &mut m.specific_quota_limit },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<AccountGasLimit>(
            "AccountGasLimit",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for AccountGasLimit {
    const NAME: &'static str = "AccountGasLimit";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.common_quota_limit = is.read_uint64()?;
                },
                18 => {
                    let len = is.read_raw_varint32()?;
                    let old_limit = is.push_limit(len as u64)?;
                    let mut key = ::std::default::Default::default();
                    let mut value = ::std::default::Default::default();
                    while let Some(tag) = is.read_raw_tag_or_eof()? {
                        match tag {
                            10 => key = is.read_string()?,
                            16 => value = is.read_uint64()?,
                            _ => ::protobuf::rt::skip_field_for_tag(tag, is)?,
                        };
                    }
                    is.pop_limit(old_limit);
                    self.specific_quota_limit.insert(key, value);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.common_quota_limit != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.common_quota_limit);
        }
        for (k, v) in &self.specific_quota_limit {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint64_size(2, *v);
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(entry_size) + entry_size
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.common_quota_limit != 0 {
            os.write_uint64(1, self.common_quota_limit)?;
        }
        for (k, v) in &self.specific_quota_limit {
            let mut entry_size = 0;
            entry_size += ::protobuf::rt::string_size(1, &k);
            entry_size += ::protobuf::rt::uint64_size(2, *v);
            os.write_raw_varint32(18)?; // Tag.
            os.write_raw_varint32(entry_size as u32)?;
            os.write_string(1, &k)?;
            os.write_uint64(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> AccountGasLimit {
        AccountGasLimit::new()
    }

    fn clear(&mut self) {
        self.common_quota_limit = 0;
        self.specific_quota_limit.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static AccountGasLimit {
        static instance: ::protobuf::rt::Lazy<AccountGasLimit> = ::protobuf::rt::Lazy::new();
        instance.get(AccountGasLimit::new)
    }
}

impl ::protobuf::MessageFull for AccountGasLimit {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("AccountGasLimit").unwrap()).clone()
    }
}

impl ::std::fmt::Display for AccountGasLimit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccountGasLimit {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:RichStatus)
pub struct RichStatus {
    // message fields
    // @@protoc_insertion_point(field:RichStatus.hash)
    pub hash: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:RichStatus.height)
    pub height: u64,
    // @@protoc_insertion_point(field:RichStatus.nodes)
    pub nodes: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:RichStatus.interval)
    pub interval: u64,
    // @@protoc_insertion_point(field:RichStatus.version)
    pub version: u32,
    // @@protoc_insertion_point(field:RichStatus.validators)
    pub validators: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:RichStatus.timestamp)
    pub timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:RichStatus.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RichStatus {
    fn default() -> &'a RichStatus {
        <RichStatus as ::protobuf::Message>::default_instance()
    }
}

impl RichStatus {
    pub fn new() -> RichStatus {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &RichStatus| { &m.hash },
            |m: &mut RichStatus| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &RichStatus| { &m.height },
            |m: &mut RichStatus| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "nodes",
            |m: &RichStatus| { &m.nodes },
            |m: &mut RichStatus| { &mut m.nodes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "interval",
            |m: &RichStatus| { &m.interval },
            |m: &mut RichStatus| { &mut m.interval },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &RichStatus| { &m.version },
            |m: &mut RichStatus| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "validators",
            |m: &RichStatus| { &m.validators },
            |m: &mut RichStatus| { &mut m.validators },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "timestamp",
            |m: &RichStatus| { &m.timestamp },
            |m: &mut RichStatus| { &mut m.timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RichStatus>(
            "RichStatus",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RichStatus {
    const NAME: &'static str = "RichStatus";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash = is.read_bytes()?;
                },
                16 => {
                    self.height = is.read_uint64()?;
                },
                26 => {
                    self.nodes.push(is.read_bytes()?);
                },
                32 => {
                    self.interval = is.read_uint64()?;
                },
                40 => {
                    self.version = is.read_uint32()?;
                },
                50 => {
                    self.validators.push(is.read_bytes()?);
                },
                56 => {
                    self.timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.height);
        }
        for value in &self.nodes {
            my_size += ::protobuf::rt::bytes_size(3, &value);
        };
        if self.interval != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.interval);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.version);
        }
        for value in &self.validators {
            my_size += ::protobuf::rt::bytes_size(6, &value);
        };
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        if self.height != 0 {
            os.write_uint64(2, self.height)?;
        }
        for v in &self.nodes {
            os.write_bytes(3, &v)?;
        };
        if self.interval != 0 {
            os.write_uint64(4, self.interval)?;
        }
        if self.version != 0 {
            os.write_uint32(5, self.version)?;
        }
        for v in &self.validators {
            os.write_bytes(6, &v)?;
        };
        if self.timestamp != 0 {
            os.write_uint64(7, self.timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RichStatus {
        RichStatus::new()
    }

    fn clear(&mut self) {
        self.hash.clear();
        self.height = 0;
        self.nodes.clear();
        self.interval = 0;
        self.version = 0;
        self.validators.clear();
        self.timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RichStatus {
        static instance: RichStatus = RichStatus {
            hash: ::std::vec::Vec::new(),
            height: 0,
            nodes: ::std::vec::Vec::new(),
            interval: 0,
            version: 0,
            validators: ::std::vec::Vec::new(),
            timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RichStatus {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RichStatus").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RichStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RichStatus {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Transaction)
pub struct Transaction {
    // message fields
    // @@protoc_insertion_point(field:Transaction.to)
    pub to: ::std::string::String,
    // @@protoc_insertion_point(field:Transaction.nonce)
    pub nonce: ::std::string::String,
    // @@protoc_insertion_point(field:Transaction.quota)
    pub quota: u64,
    // @@protoc_insertion_point(field:Transaction.valid_until_block)
    pub valid_until_block: u64,
    // @@protoc_insertion_point(field:Transaction.data)
    pub data: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:Transaction.value)
    pub value: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:Transaction.chain_id)
    pub chain_id: u32,
    // @@protoc_insertion_point(field:Transaction.version)
    pub version: u32,
    // special fields
    // @@protoc_insertion_point(special_field:Transaction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "to",
            |m: &Transaction| { &m.to },
            |m: &mut Transaction| { &mut m.to },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "nonce",
            |m: &Transaction| { &m.nonce },
            |m: &mut Transaction| { &mut m.nonce },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "quota",
            |m: &Transaction| { &m.quota },
            |m: &mut Transaction| { &mut m.quota },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "valid_until_block",
            |m: &Transaction| { &m.valid_until_block },
            |m: &mut Transaction| { &mut m.valid_until_block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Transaction| { &m.data },
            |m: &mut Transaction| { &mut m.data },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &Transaction| { &m.value },
            |m: &mut Transaction| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "chain_id",
            |m: &Transaction| { &m.chain_id },
            |m: &mut Transaction| { &mut m.chain_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Transaction| { &m.version },
            |m: &mut Transaction| { &mut m.version },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Transaction>(
            "Transaction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Transaction {
    const NAME: &'static str = "Transaction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.to = is.read_string()?;
                },
                18 => {
                    self.nonce = is.read_string()?;
                },
                24 => {
                    self.quota = is.read_uint64()?;
                },
                32 => {
                    self.valid_until_block = is.read_uint64()?;
                },
                42 => {
                    self.data = is.read_bytes()?;
                },
                50 => {
                    self.value = is.read_bytes()?;
                },
                56 => {
                    self.chain_id = is.read_uint32()?;
                },
                64 => {
                    self.version = is.read_uint32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.to.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.to);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.nonce);
        }
        if self.quota != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.quota);
        }
        if self.valid_until_block != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.valid_until_block);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.data);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.value);
        }
        if self.chain_id != 0 {
            my_size += ::protobuf::rt::uint32_size(7, self.chain_id);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(8, self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.to.is_empty() {
            os.write_string(1, &self.to)?;
        }
        if !self.nonce.is_empty() {
            os.write_string(2, &self.nonce)?;
        }
        if self.quota != 0 {
            os.write_uint64(3, self.quota)?;
        }
        if self.valid_until_block != 0 {
            os.write_uint64(4, self.valid_until_block)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(5, &self.data)?;
        }
        if !self.value.is_empty() {
            os.write_bytes(6, &self.value)?;
        }
        if self.chain_id != 0 {
            os.write_uint32(7, self.chain_id)?;
        }
        if self.version != 0 {
            os.write_uint32(8, self.version)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn clear(&mut self) {
        self.to.clear();
        self.nonce.clear();
        self.quota = 0;
        self.valid_until_block = 0;
        self.data.clear();
        self.value.clear();
        self.chain_id = 0;
        self.version = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Transaction {
        static instance: Transaction = Transaction {
            to: ::std::string::String::new(),
            nonce: ::std::string::String::new(),
            quota: 0,
            valid_until_block: 0,
            data: ::std::vec::Vec::new(),
            value: ::std::vec::Vec::new(),
            chain_id: 0,
            version: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Transaction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Transaction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:UnverifiedTransaction)
pub struct UnverifiedTransaction {
    // message fields
    // @@protoc_insertion_point(field:UnverifiedTransaction.transaction)
    pub transaction: ::protobuf::MessageField<Transaction>,
    // @@protoc_insertion_point(field:UnverifiedTransaction.signature)
    pub signature: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:UnverifiedTransaction.crypto)
    pub crypto: ::protobuf::EnumOrUnknown<Crypto>,
    // special fields
    // @@protoc_insertion_point(special_field:UnverifiedTransaction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UnverifiedTransaction {
    fn default() -> &'a UnverifiedTransaction {
        <UnverifiedTransaction as ::protobuf::Message>::default_instance()
    }
}

impl UnverifiedTransaction {
    pub fn new() -> UnverifiedTransaction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Transaction>(
            "transaction",
            |m: &UnverifiedTransaction| { &m.transaction },
            |m: &mut UnverifiedTransaction| { &mut m.transaction },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &UnverifiedTransaction| { &m.signature },
            |m: &mut UnverifiedTransaction| { &mut m.signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "crypto",
            |m: &UnverifiedTransaction| { &m.crypto },
            |m: &mut UnverifiedTransaction| { &mut m.crypto },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UnverifiedTransaction>(
            "UnverifiedTransaction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UnverifiedTransaction {
    const NAME: &'static str = "UnverifiedTransaction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transaction)?;
                },
                18 => {
                    self.signature = is.read_bytes()?;
                },
                24 => {
                    self.crypto = is.read_enum_or_unknown()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        if self.crypto != ::protobuf::EnumOrUnknown::new(Crypto::DEFAULT) {
            my_size += ::protobuf::rt::int32_size(3, self.crypto.value());
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.transaction.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        if self.crypto != ::protobuf::EnumOrUnknown::new(Crypto::DEFAULT) {
            os.write_enum(3, ::protobuf::EnumOrUnknown::value(&self.crypto))?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UnverifiedTransaction {
        UnverifiedTransaction::new()
    }

    fn clear(&mut self) {
        self.transaction.clear();
        self.signature.clear();
        self.crypto = ::protobuf::EnumOrUnknown::new(Crypto::DEFAULT);
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UnverifiedTransaction {
        static instance: UnverifiedTransaction = UnverifiedTransaction {
            transaction: ::protobuf::MessageField::none(),
            signature: ::std::vec::Vec::new(),
            crypto: ::protobuf::EnumOrUnknown::from_i32(0),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UnverifiedTransaction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UnverifiedTransaction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UnverifiedTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnverifiedTransaction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SignedTransaction)
pub struct SignedTransaction {
    // message fields
    // @@protoc_insertion_point(field:SignedTransaction.transaction_with_sig)
    pub transaction_with_sig: ::protobuf::MessageField<UnverifiedTransaction>,
    ///  SignedTransaction hash
    // @@protoc_insertion_point(field:SignedTransaction.tx_hash)
    pub tx_hash: ::std::vec::Vec<u8>,
    ///  public key
    // @@protoc_insertion_point(field:SignedTransaction.signer)
    pub signer: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:SignedTransaction.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedTransaction {
    fn default() -> &'a SignedTransaction {
        <SignedTransaction as ::protobuf::Message>::default_instance()
    }
}

impl SignedTransaction {
    pub fn new() -> SignedTransaction {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UnverifiedTransaction>(
            "transaction_with_sig",
            |m: &SignedTransaction| { &m.transaction_with_sig },
            |m: &mut SignedTransaction| { &mut m.transaction_with_sig },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_hash",
            |m: &SignedTransaction| { &m.tx_hash },
            |m: &mut SignedTransaction| { &mut m.tx_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signer",
            |m: &SignedTransaction| { &m.signer },
            |m: &mut SignedTransaction| { &mut m.signer },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedTransaction>(
            "SignedTransaction",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedTransaction {
    const NAME: &'static str = "SignedTransaction";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.transaction_with_sig)?;
                },
                18 => {
                    self.tx_hash = is.read_bytes()?;
                },
                26 => {
                    self.signer = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.transaction_with_sig.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.tx_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.tx_hash);
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signer);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.transaction_with_sig.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.tx_hash.is_empty() {
            os.write_bytes(2, &self.tx_hash)?;
        }
        if !self.signer.is_empty() {
            os.write_bytes(3, &self.signer)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedTransaction {
        SignedTransaction::new()
    }

    fn clear(&mut self) {
        self.transaction_with_sig.clear();
        self.tx_hash.clear();
        self.signer.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedTransaction {
        static instance: SignedTransaction = SignedTransaction {
            transaction_with_sig: ::protobuf::MessageField::none(),
            tx_hash: ::std::vec::Vec::new(),
            signer: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedTransaction {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedTransaction").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedTransaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedTransaction {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:BlockBody)
pub struct BlockBody {
    // message fields
    // @@protoc_insertion_point(field:BlockBody.transactions)
    pub transactions: ::std::vec::Vec<SignedTransaction>,
    // special fields
    // @@protoc_insertion_point(special_field:BlockBody.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BlockBody {
    fn default() -> &'a BlockBody {
        <BlockBody as ::protobuf::Message>::default_instance()
    }
}

impl BlockBody {
    pub fn new() -> BlockBody {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "transactions",
            |m: &BlockBody| { &m.transactions },
            |m: &mut BlockBody| { &mut m.transactions },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BlockBody>(
            "BlockBody",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BlockBody {
    const NAME: &'static str = "BlockBody";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.transactions.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.transactions {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BlockBody {
        BlockBody::new()
    }

    fn clear(&mut self) {
        self.transactions.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BlockBody {
        static instance: BlockBody = BlockBody {
            transactions: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BlockBody {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BlockBody").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BlockBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockBody {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CompactBlockBody)
pub struct CompactBlockBody {
    // message fields
    // @@protoc_insertion_point(field:CompactBlockBody.tx_hashes)
    pub tx_hashes: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:CompactBlockBody.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompactBlockBody {
    fn default() -> &'a CompactBlockBody {
        <CompactBlockBody as ::protobuf::Message>::default_instance()
    }
}

impl CompactBlockBody {
    pub fn new() -> CompactBlockBody {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tx_hashes",
            |m: &CompactBlockBody| { &m.tx_hashes },
            |m: &mut CompactBlockBody| { &mut m.tx_hashes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompactBlockBody>(
            "CompactBlockBody",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompactBlockBody {
    const NAME: &'static str = "CompactBlockBody";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.tx_hashes.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.tx_hashes {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.tx_hashes {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompactBlockBody {
        CompactBlockBody::new()
    }

    fn clear(&mut self) {
        self.tx_hashes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompactBlockBody {
        static instance: CompactBlockBody = CompactBlockBody {
            tx_hashes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompactBlockBody {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompactBlockBody").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompactBlockBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactBlockBody {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Block)
pub struct Block {
    // message fields
    // @@protoc_insertion_point(field:Block.version)
    pub version: u32,
    // @@protoc_insertion_point(field:Block.header)
    pub header: ::protobuf::MessageField<BlockHeader>,
    // @@protoc_insertion_point(field:Block.body)
    pub body: ::protobuf::MessageField<BlockBody>,
    // special fields
    // @@protoc_insertion_point(special_field:Block.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Block {
    fn default() -> &'a Block {
        <Block as ::protobuf::Message>::default_instance()
    }
}

impl Block {
    pub fn new() -> Block {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &Block| { &m.version },
            |m: &mut Block| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BlockHeader>(
            "header",
            |m: &Block| { &m.header },
            |m: &mut Block| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BlockBody>(
            "body",
            |m: &Block| { &m.body },
            |m: &mut Block| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Block>(
            "Block",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Block {
    const NAME: &'static str = "Block";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.body)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.version);
        }
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.body.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Block {
        Block::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.header.clear();
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Block {
        static instance: Block = Block {
            version: 0,
            header: ::protobuf::MessageField::none(),
            body: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Block {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Block").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Block {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Block {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CompactBlock)
pub struct CompactBlock {
    // message fields
    // @@protoc_insertion_point(field:CompactBlock.version)
    pub version: u32,
    // @@protoc_insertion_point(field:CompactBlock.header)
    pub header: ::protobuf::MessageField<BlockHeader>,
    // @@protoc_insertion_point(field:CompactBlock.body)
    pub body: ::protobuf::MessageField<CompactBlockBody>,
    // special fields
    // @@protoc_insertion_point(special_field:CompactBlock.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompactBlock {
    fn default() -> &'a CompactBlock {
        <CompactBlock as ::protobuf::Message>::default_instance()
    }
}

impl CompactBlock {
    pub fn new() -> CompactBlock {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "version",
            |m: &CompactBlock| { &m.version },
            |m: &mut CompactBlock| { &mut m.version },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BlockHeader>(
            "header",
            |m: &CompactBlock| { &m.header },
            |m: &mut CompactBlock| { &mut m.header },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CompactBlockBody>(
            "body",
            |m: &CompactBlock| { &m.body },
            |m: &mut CompactBlock| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompactBlock>(
            "CompactBlock",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompactBlock {
    const NAME: &'static str = "CompactBlock";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.version = is.read_uint32()?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.header)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.body)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.version != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.version);
        }
        if let Some(v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.version != 0 {
            os.write_uint32(1, self.version)?;
        }
        if let Some(v) = self.header.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        if let Some(v) = self.body.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompactBlock {
        CompactBlock::new()
    }

    fn clear(&mut self) {
        self.version = 0;
        self.header.clear();
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompactBlock {
        static instance: CompactBlock = CompactBlock {
            version: 0,
            header: ::protobuf::MessageField::none(),
            body: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompactBlock {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompactBlock").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompactBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactBlock {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:BlockWithProof)
pub struct BlockWithProof {
    // message fields
    // @@protoc_insertion_point(field:BlockWithProof.blk)
    pub blk: ::protobuf::MessageField<Block>,
    // @@protoc_insertion_point(field:BlockWithProof.proof)
    pub proof: ::protobuf::MessageField<Proof>,
    // special fields
    // @@protoc_insertion_point(special_field:BlockWithProof.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BlockWithProof {
    fn default() -> &'a BlockWithProof {
        <BlockWithProof as ::protobuf::Message>::default_instance()
    }
}

impl BlockWithProof {
    pub fn new() -> BlockWithProof {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Block>(
            "blk",
            |m: &BlockWithProof| { &m.blk },
            |m: &mut BlockWithProof| { &mut m.blk },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Proof>(
            "proof",
            |m: &BlockWithProof| { &m.proof },
            |m: &mut BlockWithProof| { &mut m.proof },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BlockWithProof>(
            "BlockWithProof",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BlockWithProof {
    const NAME: &'static str = "BlockWithProof";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.blk)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proof)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.blk.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if let Some(v) = self.proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.blk.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if let Some(v) = self.proof.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BlockWithProof {
        BlockWithProof::new()
    }

    fn clear(&mut self) {
        self.blk.clear();
        self.proof.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BlockWithProof {
        static instance: BlockWithProof = BlockWithProof {
            blk: ::protobuf::MessageField::none(),
            proof: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BlockWithProof {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BlockWithProof").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BlockWithProof {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockWithProof {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:BlockTxs)
pub struct BlockTxs {
    // message fields
    // @@protoc_insertion_point(field:BlockTxs.height)
    pub height: u64,
    // @@protoc_insertion_point(field:BlockTxs.body)
    pub body: ::protobuf::MessageField<BlockBody>,
    // special fields
    // @@protoc_insertion_point(special_field:BlockTxs.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BlockTxs {
    fn default() -> &'a BlockTxs {
        <BlockTxs as ::protobuf::Message>::default_instance()
    }
}

impl BlockTxs {
    pub fn new() -> BlockTxs {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &BlockTxs| { &m.height },
            |m: &mut BlockTxs| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BlockBody>(
            "body",
            |m: &BlockTxs| { &m.body },
            |m: &mut BlockTxs| { &mut m.body },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BlockTxs>(
            "BlockTxs",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BlockTxs {
    const NAME: &'static str = "BlockTxs";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_uint64()?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.body)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.height);
        }
        if let Some(v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_uint64(1, self.height)?;
        }
        if let Some(v) = self.body.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BlockTxs {
        BlockTxs::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.body.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BlockTxs {
        static instance: BlockTxs = BlockTxs {
            height: 0,
            body: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BlockTxs {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BlockTxs").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BlockTxs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockTxs {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:BlackList)
pub struct BlackList {
    // message fields
    ///  black list of address, the account that sent the transaction does not have enough gas
    // @@protoc_insertion_point(field:BlackList.black_list)
    pub black_list: ::std::vec::Vec<::std::vec::Vec<u8>>,
    ///  clear list of address
    // @@protoc_insertion_point(field:BlackList.clear_list)
    pub clear_list: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:BlackList.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BlackList {
    fn default() -> &'a BlackList {
        <BlackList as ::protobuf::Message>::default_instance()
    }
}

impl BlackList {
    pub fn new() -> BlackList {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "black_list",
            |m: &BlackList| { &m.black_list },
            |m: &mut BlackList| { &mut m.black_list },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "clear_list",
            |m: &BlackList| { &m.clear_list },
            |m: &mut BlackList| { &mut m.clear_list },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BlackList>(
            "BlackList",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BlackList {
    const NAME: &'static str = "BlackList";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.black_list.push(is.read_bytes()?);
                },
                18 => {
                    self.clear_list.push(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.black_list {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        for value in &self.clear_list {
            my_size += ::protobuf::rt::bytes_size(2, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.black_list {
            os.write_bytes(1, &v)?;
        };
        for v in &self.clear_list {
            os.write_bytes(2, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BlackList {
        BlackList::new()
    }

    fn clear(&mut self) {
        self.black_list.clear();
        self.clear_list.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BlackList {
        static instance: BlackList = BlackList {
            black_list: ::std::vec::Vec::new(),
            clear_list: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BlackList {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BlackList").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BlackList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlackList {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  State positioning signal
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:StateSignal)
pub struct StateSignal {
    // message fields
    // @@protoc_insertion_point(field:StateSignal.height)
    pub height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:StateSignal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a StateSignal {
    fn default() -> &'a StateSignal {
        <StateSignal as ::protobuf::Message>::default_instance()
    }
}

impl StateSignal {
    pub fn new() -> StateSignal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &StateSignal| { &m.height },
            |m: &mut StateSignal| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<StateSignal>(
            "StateSignal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for StateSignal {
    const NAME: &'static str = "StateSignal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.height != 0 {
            os.write_uint64(1, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> StateSignal {
        StateSignal::new()
    }

    fn clear(&mut self) {
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static StateSignal {
        static instance: StateSignal = StateSignal {
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for StateSignal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("StateSignal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for StateSignal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StateSignal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:ProofType)
pub enum ProofType {
    // @@protoc_insertion_point(enum_value:ProofType.AuthorityRound)
    AuthorityRound = 0,
    // @@protoc_insertion_point(enum_value:ProofType.Raft)
    Raft = 1,
    // @@protoc_insertion_point(enum_value:ProofType.Bft)
    Bft = 2,
}

impl ::protobuf::Enum for ProofType {
    const NAME: &'static str = "ProofType";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ProofType> {
        match value {
            0 => ::std::option::Option::Some(ProofType::AuthorityRound),
            1 => ::std::option::Option::Some(ProofType::Raft),
            2 => ::std::option::Option::Some(ProofType::Bft),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [ProofType] = &[
        ProofType::AuthorityRound,
        ProofType::Raft,
        ProofType::Bft,
    ];
}

impl ::protobuf::EnumFull for ProofType {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("ProofType").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for ProofType {
    fn default() -> Self {
        ProofType::AuthorityRound
    }
}

impl ProofType {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<ProofType>("ProofType")
    }
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:Crypto)
pub enum Crypto {
    // @@protoc_insertion_point(enum_value:Crypto.DEFAULT)
    DEFAULT = 0,
    // @@protoc_insertion_point(enum_value:Crypto.RESERVED)
    RESERVED = 1,
}

impl ::protobuf::Enum for Crypto {
    const NAME: &'static str = "Crypto";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Crypto> {
        match value {
            0 => ::std::option::Option::Some(Crypto::DEFAULT),
            1 => ::std::option::Option::Some(Crypto::RESERVED),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Crypto] = &[
        Crypto::DEFAULT,
        Crypto::RESERVED,
    ];
}

impl ::protobuf::EnumFull for Crypto {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Crypto").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = *self as usize;
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Crypto {
    fn default() -> Self {
        Crypto::DEFAULT
    }
}

impl Crypto {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Crypto>("Crypto")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10blockchain.proto\"A\n\x05Proof\x12\x18\n\x07content\x18\x01\x20\
    \x01(\x0cR\x07content\x12\x1e\n\x04type\x18\x02\x20\x01(\x0e2\n.ProofTyp\
    eR\x04type\"\xca\x02\n\x0bBlockHeader\x12\x1a\n\x08prevhash\x18\x01\x20\
    \x01(\x0cR\x08prevhash\x12\x1c\n\ttimestamp\x18\x02\x20\x01(\x04R\ttimes\
    tamp\x12\x16\n\x06height\x18\x03\x20\x01(\x04R\x06height\x12\x1d\n\nstat\
    e_root\x18\x04\x20\x01(\x0cR\tstateRoot\x12+\n\x11transactions_root\x18\
    \x05\x20\x01(\x0cR\x10transactionsRoot\x12#\n\rreceipts_root\x18\x06\x20\
    \x01(\x0cR\x0creceiptsRoot\x12\x1d\n\nquota_used\x18\x07\x20\x01(\x04R\t\
    quotaUsed\x12\x1f\n\x0bquota_limit\x18\x08\x20\x01(\x04R\nquotaLimit\x12\
    \x1c\n\x05proof\x18\t\x20\x01(\x0b2\x06.ProofR\x05proof\x12\x1a\n\x08pro\
    poser\x18\n\x20\x01(\x0cR\x08proposer\"4\n\x06Status\x12\x12\n\x04hash\
    \x18\x01\x20\x01(\x0cR\x04hash\x12\x16\n\x06height\x18\x02\x20\x01(\x04R\
    \x06height\"\xe2\x01\n\x0fAccountGasLimit\x12,\n\x12common_quota_limit\
    \x18\x01\x20\x01(\x04R\x10commonQuotaLimit\x12Z\n\x14specific_quota_limi\
    t\x18\x02\x20\x03(\x0b2(.AccountGasLimit.SpecificQuotaLimitEntryR\x12spe\
    cificQuotaLimit\x1aE\n\x17SpecificQuotaLimitEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\x04R\x05valu\
    e:\x028\x01\"\xc2\x01\n\nRichStatus\x12\x12\n\x04hash\x18\x01\x20\x01(\
    \x0cR\x04hash\x12\x16\n\x06height\x18\x02\x20\x01(\x04R\x06height\x12\
    \x14\n\x05nodes\x18\x03\x20\x03(\x0cR\x05nodes\x12\x1a\n\x08interval\x18\
    \x04\x20\x01(\x04R\x08interval\x12\x18\n\x07version\x18\x05\x20\x01(\rR\
    \x07version\x12\x1e\n\nvalidators\x18\x06\x20\x03(\x0cR\nvalidators\x12\
    \x1c\n\ttimestamp\x18\x07\x20\x01(\x04R\ttimestamp\"\xd4\x01\n\x0bTransa\
    ction\x12\x0e\n\x02to\x18\x01\x20\x01(\tR\x02to\x12\x14\n\x05nonce\x18\
    \x02\x20\x01(\tR\x05nonce\x12\x14\n\x05quota\x18\x03\x20\x01(\x04R\x05qu\
    ota\x12*\n\x11valid_until_block\x18\x04\x20\x01(\x04R\x0fvalidUntilBlock\
    \x12\x12\n\x04data\x18\x05\x20\x01(\x0cR\x04data\x12\x14\n\x05value\x18\
    \x06\x20\x01(\x0cR\x05value\x12\x19\n\x08chain_id\x18\x07\x20\x01(\rR\
    \x07chainId\x12\x18\n\x07version\x18\x08\x20\x01(\rR\x07version\"\x86\
    \x01\n\x15UnverifiedTransaction\x12.\n\x0btransaction\x18\x01\x20\x01(\
    \x0b2\x0c.TransactionR\x0btransaction\x12\x1c\n\tsignature\x18\x02\x20\
    \x01(\x0cR\tsignature\x12\x1f\n\x06crypto\x18\x03\x20\x01(\x0e2\x07.Cryp\
    toR\x06crypto\"\x8e\x01\n\x11SignedTransaction\x12H\n\x14transaction_wit\
    h_sig\x18\x01\x20\x01(\x0b2\x16.UnverifiedTransactionR\x12transactionWit\
    hSig\x12\x17\n\x07tx_hash\x18\x02\x20\x01(\x0cR\x06txHash\x12\x16\n\x06s\
    igner\x18\x03\x20\x01(\x0cR\x06signer\"C\n\tBlockBody\x126\n\x0ctransact\
    ions\x18\x01\x20\x03(\x0b2\x12.SignedTransactionR\x0ctransactions\"/\n\
    \x10CompactBlockBody\x12\x1b\n\ttx_hashes\x18\x01\x20\x03(\x0cR\x08txHas\
    hes\"g\n\x05Block\x12\x18\n\x07version\x18\x01\x20\x01(\rR\x07version\
    \x12$\n\x06header\x18\x02\x20\x01(\x0b2\x0c.BlockHeaderR\x06header\x12\
    \x1e\n\x04body\x18\x03\x20\x01(\x0b2\n.BlockBodyR\x04body\"u\n\x0cCompac\
    tBlock\x12\x18\n\x07version\x18\x01\x20\x01(\rR\x07version\x12$\n\x06hea\
    der\x18\x02\x20\x01(\x0b2\x0c.BlockHeaderR\x06header\x12%\n\x04body\x18\
    \x03\x20\x01(\x0b2\x11.CompactBlockBodyR\x04body\"H\n\x0eBlockWithProof\
    \x12\x18\n\x03blk\x18\x01\x20\x01(\x0b2\x06.BlockR\x03blk\x12\x1c\n\x05p\
    roof\x18\x02\x20\x01(\x0b2\x06.ProofR\x05proof\"B\n\x08BlockTxs\x12\x16\
    \n\x06height\x18\x01\x20\x01(\x04R\x06height\x12\x1e\n\x04body\x18\x03\
    \x20\x01(\x0b2\n.BlockBodyR\x04body\"I\n\tBlackList\x12\x1d\n\nblack_lis\
    t\x18\x01\x20\x03(\x0cR\tblackList\x12\x1d\n\nclear_list\x18\x02\x20\x03\
    (\x0cR\tclearList\"%\n\x0bStateSignal\x12\x16\n\x06height\x18\x01\x20\
    \x01(\x04R\x06height*2\n\tProofType\x12\x12\n\x0eAuthorityRound\x10\0\
    \x12\x08\n\x04Raft\x10\x01\x12\x07\n\x03Bft\x10\x02*#\n\x06Crypto\x12\
    \x0b\n\x07DEFAULT\x10\0\x12\x0c\n\x08RESERVED\x10\x01J\x8e#\n\x06\x12\
    \x04\0\0v\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\n\n\x02\x05\0\x12\x04\
    \x02\0\x06\x01\n\n\n\x03\x05\0\x01\x12\x03\x02\x05\x0e\n\x0b\n\x04\x05\0\
    \x02\0\x12\x03\x03\x04\x17\n\x0c\n\x05\x05\0\x02\0\x01\x12\x03\x03\x04\
    \x12\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03\x03\x15\x16\n\x0b\n\x04\x05\0\
    \x02\x01\x12\x03\x04\x04\r\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03\x04\x04\
    \x08\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03\x04\x0b\x0c\n\x0b\n\x04\x05\0\
    \x02\x02\x12\x03\x05\x04\x0c\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x03\x05\
    \x04\x07\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03\x05\n\x0b\n\n\n\x02\x04\0\
    \x12\x04\x08\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\r\n\x0b\n\x04\
    \x04\0\x02\0\x12\x03\t\x04\x16\n\r\n\x05\x04\0\x02\0\x04\x12\x04\t\x04\
    \x08\x0f\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\x04\t\n\x0c\n\x05\x04\0\
    \x02\0\x01\x12\x03\t\n\x11\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\t\x14\x15\
    \n\x0b\n\x04\x04\0\x02\x01\x12\x03\n\x04\x17\n\r\n\x05\x04\0\x02\x01\x04\
    \x12\x04\n\x04\t\x16\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\n\x04\r\n\x0c\
    \n\x05\x04\0\x02\x01\x01\x12\x03\n\x0e\x12\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03\n\x15\x16\n\n\n\x02\x04\x01\x12\x04\r\0\x18\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03\r\x08\x13\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0e\x04\x17\
    \n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0e\x04\r\x15\n\x0c\n\x05\x04\x01\
    \x02\0\x05\x12\x03\x0e\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\n\
    \x12\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0e\x15\x16\n\x0b\n\x04\x04\
    \x01\x02\x01\x12\x03\x0f\x04\x19\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\
    \x0f\x04\x0e\x17\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0f\x04\n\n\x0c\
    \n\x05\x04\x01\x02\x01\x01\x12\x03\x0f\x0b\x14\n\x0c\n\x05\x04\x01\x02\
    \x01\x03\x12\x03\x0f\x17\x18\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x10\x04\
    \x16\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04\x10\x04\x0f\x19\n\x0c\n\x05\
    \x04\x01\x02\x02\x05\x12\x03\x10\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\
    \x12\x03\x10\x0b\x11\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x10\x14\x15\
    \n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x11\x04\x19\n\r\n\x05\x04\x01\x02\
    \x03\x04\x12\x04\x11\x04\x10\x16\n\x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\
    \x11\x04\t\n\x0c\n\x05\x04\x01\x02\x03\x01\x12\x03\x11\n\x14\n\x0c\n\x05\
    \x04\x01\x02\x03\x03\x12\x03\x11\x17\x18\n\x0b\n\x04\x04\x01\x02\x04\x12\
    \x03\x12\x04\x20\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04\x12\x04\x11\x19\n\
    \x0c\n\x05\x04\x01\x02\x04\x05\x12\x03\x12\x04\t\n\x0c\n\x05\x04\x01\x02\
    \x04\x01\x12\x03\x12\n\x1b\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x12\
    \x1e\x1f\n\x0b\n\x04\x04\x01\x02\x05\x12\x03\x13\x04\x1c\n\r\n\x05\x04\
    \x01\x02\x05\x04\x12\x04\x13\x04\x12\x20\n\x0c\n\x05\x04\x01\x02\x05\x05\
    \x12\x03\x13\x04\t\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x13\n\x17\n\
    \x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x13\x1a\x1b\n\x0b\n\x04\x04\x01\
    \x02\x06\x12\x03\x14\x04\x1a\n\r\n\x05\x04\x01\x02\x06\x04\x12\x04\x14\
    \x04\x13\x1c\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03\x14\x04\n\n\x0c\n\
    \x05\x04\x01\x02\x06\x01\x12\x03\x14\x0b\x15\n\x0c\n\x05\x04\x01\x02\x06\
    \x03\x12\x03\x14\x18\x19\n\x0b\n\x04\x04\x01\x02\x07\x12\x03\x15\x04\x1b\
    \n\r\n\x05\x04\x01\x02\x07\x04\x12\x04\x15\x04\x14\x1a\n\x0c\n\x05\x04\
    \x01\x02\x07\x05\x12\x03\x15\x04\n\n\x0c\n\x05\x04\x01\x02\x07\x01\x12\
    \x03\x15\x0b\x16\n\x0c\n\x05\x04\x01\x02\x07\x03\x12\x03\x15\x19\x1a\n\
    \x0b\n\x04\x04\x01\x02\x08\x12\x03\x16\x04\x14\n\r\n\x05\x04\x01\x02\x08\
    \x04\x12\x04\x16\x04\x15\x1b\n\x0c\n\x05\x04\x01\x02\x08\x06\x12\x03\x16\
    \x04\t\n\x0c\n\x05\x04\x01\x02\x08\x01\x12\x03\x16\n\x0f\n\x0c\n\x05\x04\
    \x01\x02\x08\x03\x12\x03\x16\x12\x13\n\x0b\n\x04\x04\x01\x02\t\x12\x03\
    \x17\x04\x18\n\r\n\x05\x04\x01\x02\t\x04\x12\x04\x17\x04\x16\x14\n\x0c\n\
    \x05\x04\x01\x02\t\x05\x12\x03\x17\x04\t\n\x0c\n\x05\x04\x01\x02\t\x01\
    \x12\x03\x17\n\x12\n\x0c\n\x05\x04\x01\x02\t\x03\x12\x03\x17\x15\x17\n\n\
    \n\x02\x04\x02\x12\x04\x1a\0\x1d\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1a\
    \x08\x0e\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1b\x04\x13\n\r\n\x05\x04\x02\
    \x02\0\x04\x12\x04\x1b\x04\x1a\x10\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\
    \x1b\x04\t\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1b\n\x0e\n\x0c\n\x05\
    \x04\x02\x02\0\x03\x12\x03\x1b\x11\x12\n\x0b\n\x04\x04\x02\x02\x01\x12\
    \x03\x1c\x04\x16\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x1c\x04\x1b\x13\n\
    \x0c\n\x05\x04\x02\x02\x01\x05\x12\x03\x1c\x04\n\n\x0c\n\x05\x04\x02\x02\
    \x01\x01\x12\x03\x1c\x0b\x11\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1c\
    \x14\x15\n\n\n\x02\x04\x03\x12\x04\x1f\0\"\x01\n\n\n\x03\x04\x03\x01\x12\
    \x03\x1f\x08\x17\n\x0b\n\x04\x04\x03\x02\0\x12\x03\x20\x04\"\n\r\n\x05\
    \x04\x03\x02\0\x04\x12\x04\x20\x04\x1f\x19\n\x0c\n\x05\x04\x03\x02\0\x05\
    \x12\x03\x20\x04\n\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x20\x0b\x1d\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x20\x20!\n\x0b\n\x04\x04\x03\x02\
    \x01\x12\x03!\x040\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04!\x04\x20\"\n\
    \x0c\n\x05\x04\x03\x02\x01\x06\x12\x03!\x04\x16\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03!\x17+\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03!./\n\n\n\
    \x02\x04\x04\x12\x04$\0,\x01\n\n\n\x03\x04\x04\x01\x12\x03$\x08\x12\n\
    \x0b\n\x04\x04\x04\x02\0\x12\x03%\x04\x13\n\r\n\x05\x04\x04\x02\0\x04\
    \x12\x04%\x04$\x14\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03%\x04\t\n\x0c\n\
    \x05\x04\x04\x02\0\x01\x12\x03%\n\x0e\n\x0c\n\x05\x04\x04\x02\0\x03\x12\
    \x03%\x11\x12\n\x0b\n\x04\x04\x04\x02\x01\x12\x03&\x04\x16\n\r\n\x05\x04\
    \x04\x02\x01\x04\x12\x04&\x04%\x13\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\
    \x03&\x04\n\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03&\x0b\x11\n\x0c\n\x05\
    \x04\x04\x02\x01\x03\x12\x03&\x14\x15\n\x0b\n\x04\x04\x04\x02\x02\x12\
    \x03'\x04\x1d\n\x0c\n\x05\x04\x04\x02\x02\x04\x12\x03'\x04\x0c\n\x0c\n\
    \x05\x04\x04\x02\x02\x05\x12\x03'\r\x12\n\x0c\n\x05\x04\x04\x02\x02\x01\
    \x12\x03'\x13\x18\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03'\x1b\x1c\n\x0b\
    \n\x04\x04\x04\x02\x03\x12\x03(\x04\x18\n\r\n\x05\x04\x04\x02\x03\x04\
    \x12\x04(\x04'\x1d\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03(\x04\n\n\x0c\
    \n\x05\x04\x04\x02\x03\x01\x12\x03(\x0b\x13\n\x0c\n\x05\x04\x04\x02\x03\
    \x03\x12\x03(\x16\x17\n\x0b\n\x04\x04\x04\x02\x04\x12\x03)\x04\x17\n\r\n\
    \x05\x04\x04\x02\x04\x04\x12\x04)\x04(\x18\n\x0c\n\x05\x04\x04\x02\x04\
    \x05\x12\x03)\x04\n\n\x0c\n\x05\x04\x04\x02\x04\x01\x12\x03)\x0b\x12\n\
    \x0c\n\x05\x04\x04\x02\x04\x03\x12\x03)\x15\x16\n\x0b\n\x04\x04\x04\x02\
    \x05\x12\x03*\x04\"\n\x0c\n\x05\x04\x04\x02\x05\x04\x12\x03*\x04\x0c\n\
    \x0c\n\x05\x04\x04\x02\x05\x05\x12\x03*\r\x12\n\x0c\n\x05\x04\x04\x02\
    \x05\x01\x12\x03*\x13\x1d\n\x0c\n\x05\x04\x04\x02\x05\x03\x12\x03*\x20!\
    \n\x0b\n\x04\x04\x04\x02\x06\x12\x03+\x04\x19\n\r\n\x05\x04\x04\x02\x06\
    \x04\x12\x04+\x04*\"\n\x0c\n\x05\x04\x04\x02\x06\x05\x12\x03+\x04\n\n\
    \x0c\n\x05\x04\x04\x02\x06\x01\x12\x03+\x0b\x14\n\x0c\n\x05\x04\x04\x02\
    \x06\x03\x12\x03+\x17\x18\n\n\n\x02\x05\x01\x12\x04.\01\x01\n\n\n\x03\
    \x05\x01\x01\x12\x03.\x05\x0b\n\x0b\n\x04\x05\x01\x02\0\x12\x03/\x04\x10\
    \n\x0c\n\x05\x05\x01\x02\0\x01\x12\x03/\x04\x0b\n\x0c\n\x05\x05\x01\x02\
    \0\x02\x12\x03/\x0e\x0f\n\x0b\n\x04\x05\x01\x02\x01\x12\x030\x04\x11\n\
    \x0c\n\x05\x05\x01\x02\x01\x01\x12\x030\x04\x0c\n\x0c\n\x05\x05\x01\x02\
    \x01\x02\x12\x030\x0f\x10\n\n\n\x02\x04\x05\x12\x043\0<\x01\n\n\n\x03\
    \x04\x05\x01\x12\x033\x08\x13\n\x0b\n\x04\x04\x05\x02\0\x12\x034\x04\x12\
    \n\r\n\x05\x04\x05\x02\0\x04\x12\x044\x043\x15\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x034\x04\n\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x034\x0b\r\n\x0c\n\
    \x05\x04\x05\x02\0\x03\x12\x034\x10\x11\n\x0b\n\x04\x04\x05\x02\x01\x12\
    \x035\x04\x15\n\r\n\x05\x04\x05\x02\x01\x04\x12\x045\x044\x12\n\x0c\n\
    \x05\x04\x05\x02\x01\x05\x12\x035\x04\n\n\x0c\n\x05\x04\x05\x02\x01\x01\
    \x12\x035\x0b\x10\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x035\x13\x14\n\x0b\
    \n\x04\x04\x05\x02\x02\x12\x036\x04\x15\n\r\n\x05\x04\x05\x02\x02\x04\
    \x12\x046\x045\x15\n\x0c\n\x05\x04\x05\x02\x02\x05\x12\x036\x04\n\n\x0c\
    \n\x05\x04\x05\x02\x02\x01\x12\x036\x0b\x10\n\x0c\n\x05\x04\x05\x02\x02\
    \x03\x12\x036\x13\x14\n\x0b\n\x04\x04\x05\x02\x03\x12\x037\x04!\n\r\n\
    \x05\x04\x05\x02\x03\x04\x12\x047\x046\x15\n\x0c\n\x05\x04\x05\x02\x03\
    \x05\x12\x037\x04\n\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x037\x0b\x1c\n\
    \x0c\n\x05\x04\x05\x02\x03\x03\x12\x037\x1f\x20\n\x0b\n\x04\x04\x05\x02\
    \x04\x12\x038\x04\x13\n\r\n\x05\x04\x05\x02\x04\x04\x12\x048\x047!\n\x0c\
    \n\x05\x04\x05\x02\x04\x05\x12\x038\x04\t\n\x0c\n\x05\x04\x05\x02\x04\
    \x01\x12\x038\n\x0e\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x038\x11\x12\n\
    \x0b\n\x04\x04\x05\x02\x05\x12\x039\x04\x14\n\r\n\x05\x04\x05\x02\x05\
    \x04\x12\x049\x048\x13\n\x0c\n\x05\x04\x05\x02\x05\x05\x12\x039\x04\t\n\
    \x0c\n\x05\x04\x05\x02\x05\x01\x12\x039\n\x0f\n\x0c\n\x05\x04\x05\x02\
    \x05\x03\x12\x039\x12\x13\n\x0b\n\x04\x04\x05\x02\x06\x12\x03:\x04\x18\n\
    \r\n\x05\x04\x05\x02\x06\x04\x12\x04:\x049\x14\n\x0c\n\x05\x04\x05\x02\
    \x06\x05\x12\x03:\x04\n\n\x0c\n\x05\x04\x05\x02\x06\x01\x12\x03:\x0b\x13\
    \n\x0c\n\x05\x04\x05\x02\x06\x03\x12\x03:\x16\x17\n\x0b\n\x04\x04\x05\
    \x02\x07\x12\x03;\x04\x17\n\r\n\x05\x04\x05\x02\x07\x04\x12\x04;\x04:\
    \x18\n\x0c\n\x05\x04\x05\x02\x07\x05\x12\x03;\x04\n\n\x0c\n\x05\x04\x05\
    \x02\x07\x01\x12\x03;\x0b\x12\n\x0c\n\x05\x04\x05\x02\x07\x03\x12\x03;\
    \x15\x16\n\n\n\x02\x04\x06\x12\x04>\0B\x01\n\n\n\x03\x04\x06\x01\x12\x03\
    >\x08\x1d\n\x0b\n\x04\x04\x06\x02\0\x12\x03?\x04\x20\n\r\n\x05\x04\x06\
    \x02\0\x04\x12\x04?\x04>\x1f\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x03?\x04\
    \x0f\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03?\x10\x1b\n\x0c\n\x05\x04\x06\
    \x02\0\x03\x12\x03?\x1e\x1f\n\x0b\n\x04\x04\x06\x02\x01\x12\x03@\x04\x18\
    \n\r\n\x05\x04\x06\x02\x01\x04\x12\x04@\x04?\x20\n\x0c\n\x05\x04\x06\x02\
    \x01\x05\x12\x03@\x04\t\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03@\n\x13\n\
    \x0c\n\x05\x04\x06\x02\x01\x03\x12\x03@\x16\x17\n\x0b\n\x04\x04\x06\x02\
    \x02\x12\x03A\x04\x16\n\r\n\x05\x04\x06\x02\x02\x04\x12\x04A\x04@\x18\n\
    \x0c\n\x05\x04\x06\x02\x02\x06\x12\x03A\x04\n\n\x0c\n\x05\x04\x06\x02\
    \x02\x01\x12\x03A\x0b\x11\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03A\x14\
    \x15\n\n\n\x02\x04\x07\x12\x04D\0J\x01\n\n\n\x03\x04\x07\x01\x12\x03D\
    \x08\x19\n\x0b\n\x04\x04\x07\x02\0\x12\x03E\x043\n\r\n\x05\x04\x07\x02\0\
    \x04\x12\x04E\x04D\x1b\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03E\x04\x19\n\
    \x0c\n\x05\x04\x07\x02\0\x01\x12\x03E\x1a.\n\x0c\n\x05\x04\x07\x02\0\x03\
    \x12\x03E12\n%\n\x04\x04\x07\x02\x01\x12\x03G\x04\x16\x1a\x18\x20SignedT\
    ransaction\x20hash\n\n\r\n\x05\x04\x07\x02\x01\x04\x12\x04G\x04E3\n\x0c\
    \n\x05\x04\x07\x02\x01\x05\x12\x03G\x04\t\n\x0c\n\x05\x04\x07\x02\x01\
    \x01\x12\x03G\n\x11\n\x0c\n\x05\x04\x07\x02\x01\x03\x12\x03G\x14\x15\n\
    \x19\n\x04\x04\x07\x02\x02\x12\x03I\x04\x15\x1a\x0c\x20public\x20key\n\n\
    \r\n\x05\x04\x07\x02\x02\x04\x12\x04I\x04G\x16\n\x0c\n\x05\x04\x07\x02\
    \x02\x05\x12\x03I\x04\t\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03I\n\x10\n\
    \x0c\n\x05\x04\x07\x02\x02\x03\x12\x03I\x13\x14\n!\n\x02\x04\x08\x12\x04\
    N\0P\x012\x15\x20data\x20precompile\x20API\n\n\n\n\x03\x04\x08\x01\x12\
    \x03N\x08\x11\n\x0b\n\x04\x04\x08\x02\0\x12\x03O\x040\n\x0c\n\x05\x04\
    \x08\x02\0\x04\x12\x03O\x04\x0c\n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03O\r\
    \x1e\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03O\x1f+\n\x0c\n\x05\x04\x08\x02\
    \0\x03\x12\x03O./\n\n\n\x02\x04\t\x12\x04R\0T\x01\n\n\n\x03\x04\t\x01\
    \x12\x03R\x08\x18\n\x0b\n\x04\x04\t\x02\0\x12\x03S\x04!\n\x0c\n\x05\x04\
    \t\x02\0\x04\x12\x03S\x04\x0c\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03S\r\x12\
    \n\x0c\n\x05\x04\t\x02\0\x01\x12\x03S\x13\x1c\n\x0c\n\x05\x04\t\x02\0\
    \x03\x12\x03S\x1f\x20\n\n\n\x02\x04\n\x12\x04V\0Z\x01\n\n\n\x03\x04\n\
    \x01\x12\x03V\x08\r\n\x0b\n\x04\x04\n\x02\0\x12\x03W\x04\x17\n\r\n\x05\
    \x04\n\x02\0\x04\x12\x04W\x04V\x0f\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03W\
    \x04\n\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03W\x0b\x12\n\x0c\n\x05\x04\n\
    \x02\0\x03\x12\x03W\x15\x16\n\x0b\n\x04\x04\n\x02\x01\x12\x03X\x04\x1b\n\
    \r\n\x05\x04\n\x02\x01\x04\x12\x04X\x04W\x17\n\x0c\n\x05\x04\n\x02\x01\
    \x06\x12\x03X\x04\x0f\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03X\x10\x16\n\
    \x0c\n\x05\x04\n\x02\x01\x03\x12\x03X\x19\x1a\n\x0b\n\x04\x04\n\x02\x02\
    \x12\x03Y\x04\x17\n\r\n\x05\x04\n\x02\x02\x04\x12\x04Y\x04X\x1b\n\x0c\n\
    \x05\x04\n\x02\x02\x06\x12\x03Y\x04\r\n\x0c\n\x05\x04\n\x02\x02\x01\x12\
    \x03Y\x0e\x12\n\x0c\n\x05\x04\n\x02\x02\x03\x12\x03Y\x15\x16\n\n\n\x02\
    \x04\x0b\x12\x04\\\0`\x01\n\n\n\x03\x04\x0b\x01\x12\x03\\\x08\x14\n\x0b\
    \n\x04\x04\x0b\x02\0\x12\x03]\x04\x17\n\r\n\x05\x04\x0b\x02\0\x04\x12\
    \x04]\x04\\\x16\n\x0c\n\x05\x04\x0b\x02\0\x05\x12\x03]\x04\n\n\x0c\n\x05\
    \x04\x0b\x02\0\x01\x12\x03]\x0b\x12\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\
    \x03]\x15\x16\n\x0b\n\x04\x04\x0b\x02\x01\x12\x03^\x04\x1b\n\r\n\x05\x04\
    \x0b\x02\x01\x04\x12\x04^\x04]\x17\n\x0c\n\x05\x04\x0b\x02\x01\x06\x12\
    \x03^\x04\x0f\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03^\x10\x16\n\x0c\n\
    \x05\x04\x0b\x02\x01\x03\x12\x03^\x19\x1a\n\x0b\n\x04\x04\x0b\x02\x02\
    \x12\x03_\x04\x1e\n\r\n\x05\x04\x0b\x02\x02\x04\x12\x04_\x04^\x1b\n\x0c\
    \n\x05\x04\x0b\x02\x02\x06\x12\x03_\x04\x14\n\x0c\n\x05\x04\x0b\x02\x02\
    \x01\x12\x03_\x15\x19\n\x0c\n\x05\x04\x0b\x02\x02\x03\x12\x03_\x1c\x1d\n\
    \n\n\x02\x04\x0c\x12\x04b\0e\x01\n\n\n\x03\x04\x0c\x01\x12\x03b\x08\x16\
    \n\x0b\n\x04\x04\x0c\x02\0\x12\x03c\x04\x12\n\r\n\x05\x04\x0c\x02\0\x04\
    \x12\x04c\x04b\x18\n\x0c\n\x05\x04\x0c\x02\0\x06\x12\x03c\x04\t\n\x0c\n\
    \x05\x04\x0c\x02\0\x01\x12\x03c\n\r\n\x0c\n\x05\x04\x0c\x02\0\x03\x12\
    \x03c\x10\x11\n\x0b\n\x04\x04\x0c\x02\x01\x12\x03d\x04\x14\n\r\n\x05\x04\
    \x0c\x02\x01\x04\x12\x04d\x04c\x12\n\x0c\n\x05\x04\x0c\x02\x01\x06\x12\
    \x03d\x04\t\n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\x03d\n\x0f\n\x0c\n\x05\
    \x04\x0c\x02\x01\x03\x12\x03d\x12\x13\n\n\n\x02\x04\r\x12\x04g\0j\x01\n\
    \n\n\x03\x04\r\x01\x12\x03g\x08\x10\n\x0b\n\x04\x04\r\x02\0\x12\x03h\x04\
    \x16\n\r\n\x05\x04\r\x02\0\x04\x12\x04h\x04g\x12\n\x0c\n\x05\x04\r\x02\0\
    \x05\x12\x03h\x04\n\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03h\x0b\x11\n\x0c\n\
    \x05\x04\r\x02\0\x03\x12\x03h\x14\x15\n\x0b\n\x04\x04\r\x02\x01\x12\x03i\
    \x04\x17\n\r\n\x05\x04\r\x02\x01\x04\x12\x04i\x04h\x16\n\x0c\n\x05\x04\r\
    \x02\x01\x06\x12\x03i\x04\r\n\x0c\n\x05\x04\r\x02\x01\x01\x12\x03i\x0e\
    \x12\n\x0c\n\x05\x04\r\x02\x01\x03\x12\x03i\x15\x16\n\n\n\x02\x04\x0e\
    \x12\x04l\0q\x01\n\n\n\x03\x04\x0e\x01\x12\x03l\x08\x11\nd\n\x04\x04\x0e\
    \x02\0\x12\x03n\x04\"\x1aW\x20black\x20list\x20of\x20address,\x20the\x20\
    account\x20that\x20sent\x20the\x20transaction\x20does\x20not\x20have\x20\
    enough\x20gas\n\n\x0c\n\x05\x04\x0e\x02\0\x04\x12\x03n\x04\x0c\n\x0c\n\
    \x05\x04\x0e\x02\0\x05\x12\x03n\r\x12\n\x0c\n\x05\x04\x0e\x02\0\x01\x12\
    \x03n\x13\x1d\n\x0c\n\x05\x04\x0e\x02\0\x03\x12\x03n\x20!\n$\n\x04\x04\
    \x0e\x02\x01\x12\x03p\x04\"\x1a\x17\x20clear\x20list\x20of\x20address\n\
    \n\x0c\n\x05\x04\x0e\x02\x01\x04\x12\x03p\x04\x0c\n\x0c\n\x05\x04\x0e\
    \x02\x01\x05\x12\x03p\r\x12\n\x0c\n\x05\x04\x0e\x02\x01\x01\x12\x03p\x13\
    \x1d\n\x0c\n\x05\x04\x0e\x02\x01\x03\x12\x03p\x20!\n&\n\x02\x04\x0f\x12\
    \x04t\0v\x01\x1a\x1a\x20State\x20positioning\x20signal\n\n\n\n\x03\x04\
    \x0f\x01\x12\x03t\x08\x13\n\x0b\n\x04\x04\x0f\x02\0\x12\x03u\x04\x16\n\r\
    \n\x05\x04\x0f\x02\0\x04\x12\x04u\x04t\x15\n\x0c\n\x05\x04\x0f\x02\0\x05\
    \x12\x03u\x04\n\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03u\x0b\x11\n\x0c\n\
    \x05\x04\x0f\x02\0\x03\x12\x03u\x14\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(16);
            messages.push(Proof::generated_message_descriptor_data());
            messages.push(BlockHeader::generated_message_descriptor_data());
            messages.push(Status::generated_message_descriptor_data());
            messages.push(AccountGasLimit::generated_message_descriptor_data());
            messages.push(RichStatus::generated_message_descriptor_data());
            messages.push(Transaction::generated_message_descriptor_data());
            messages.push(UnverifiedTransaction::generated_message_descriptor_data());
            messages.push(SignedTransaction::generated_message_descriptor_data());
            messages.push(BlockBody::generated_message_descriptor_data());
            messages.push(CompactBlockBody::generated_message_descriptor_data());
            messages.push(Block::generated_message_descriptor_data());
            messages.push(CompactBlock::generated_message_descriptor_data());
            messages.push(BlockWithProof::generated_message_descriptor_data());
            messages.push(BlockTxs::generated_message_descriptor_data());
            messages.push(BlackList::generated_message_descriptor_data());
            messages.push(StateSignal::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(2);
            enums.push(ProofType::generated_enum_descriptor_data());
            enums.push(Crypto::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
