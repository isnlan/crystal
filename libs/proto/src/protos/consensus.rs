// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `consensus.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CompactProposal)
pub struct CompactProposal {
    // message fields
    // @@protoc_insertion_point(field:CompactProposal.block)
    pub block: ::protobuf::MessageField<super::blockchain::CompactBlock>,
    // @@protoc_insertion_point(field:CompactProposal.islock)
    pub islock: bool,
    // @@protoc_insertion_point(field:CompactProposal.lock_round)
    pub lock_round: u64,
    // @@protoc_insertion_point(field:CompactProposal.lock_votes)
    pub lock_votes: ::std::vec::Vec<Vote>,
    // @@protoc_insertion_point(field:CompactProposal.round)
    pub round: u64,
    // @@protoc_insertion_point(field:CompactProposal.height)
    pub height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:CompactProposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompactProposal {
    fn default() -> &'a CompactProposal {
        <CompactProposal as ::protobuf::Message>::default_instance()
    }
}

impl CompactProposal {
    pub fn new() -> CompactProposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::blockchain::CompactBlock>(
            "block",
            |m: &CompactProposal| { &m.block },
            |m: &mut CompactProposal| { &mut m.block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "islock",
            |m: &CompactProposal| { &m.islock },
            |m: &mut CompactProposal| { &mut m.islock },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lock_round",
            |m: &CompactProposal| { &m.lock_round },
            |m: &mut CompactProposal| { &mut m.lock_round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "lock_votes",
            |m: &CompactProposal| { &m.lock_votes },
            |m: &mut CompactProposal| { &mut m.lock_votes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "round",
            |m: &CompactProposal| { &m.round },
            |m: &mut CompactProposal| { &mut m.round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &CompactProposal| { &m.height },
            |m: &mut CompactProposal| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompactProposal>(
            "CompactProposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompactProposal {
    const NAME: &'static str = "CompactProposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block)?;
                },
                16 => {
                    self.islock = is.read_bool()?;
                },
                24 => {
                    self.lock_round = is.read_uint64()?;
                },
                34 => {
                    self.lock_votes.push(is.read_message()?);
                },
                40 => {
                    self.round = is.read_uint64()?;
                },
                48 => {
                    self.height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.islock != false {
            my_size += 1 + 1;
        }
        if self.lock_round != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.lock_round);
        }
        for value in &self.lock_votes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.round != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.round);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.islock != false {
            os.write_bool(2, self.islock)?;
        }
        if self.lock_round != 0 {
            os.write_uint64(3, self.lock_round)?;
        }
        for v in &self.lock_votes {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.round != 0 {
            os.write_uint64(5, self.round)?;
        }
        if self.height != 0 {
            os.write_uint64(6, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompactProposal {
        CompactProposal::new()
    }

    fn clear(&mut self) {
        self.block.clear();
        self.islock = false;
        self.lock_round = 0;
        self.lock_votes.clear();
        self.round = 0;
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompactProposal {
        static instance: CompactProposal = CompactProposal {
            block: ::protobuf::MessageField::none(),
            islock: false,
            lock_round: 0,
            lock_votes: ::std::vec::Vec::new(),
            round: 0,
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompactProposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompactProposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompactProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactProposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Proposal)
pub struct Proposal {
    // message fields
    // @@protoc_insertion_point(field:Proposal.block)
    pub block: ::protobuf::MessageField<super::blockchain::Block>,
    // @@protoc_insertion_point(field:Proposal.islock)
    pub islock: bool,
    // @@protoc_insertion_point(field:Proposal.lock_round)
    pub lock_round: u64,
    // @@protoc_insertion_point(field:Proposal.lock_votes)
    pub lock_votes: ::std::vec::Vec<Vote>,
    // @@protoc_insertion_point(field:Proposal.round)
    pub round: u64,
    // @@protoc_insertion_point(field:Proposal.height)
    pub height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:Proposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Proposal {
    fn default() -> &'a Proposal {
        <Proposal as ::protobuf::Message>::default_instance()
    }
}

impl Proposal {
    pub fn new() -> Proposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, super::blockchain::Block>(
            "block",
            |m: &Proposal| { &m.block },
            |m: &mut Proposal| { &mut m.block },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "islock",
            |m: &Proposal| { &m.islock },
            |m: &mut Proposal| { &mut m.islock },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "lock_round",
            |m: &Proposal| { &m.lock_round },
            |m: &mut Proposal| { &mut m.lock_round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "lock_votes",
            |m: &Proposal| { &m.lock_votes },
            |m: &mut Proposal| { &mut m.lock_votes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "round",
            |m: &Proposal| { &m.round },
            |m: &mut Proposal| { &mut m.round },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &Proposal| { &m.height },
            |m: &mut Proposal| { &mut m.height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Proposal>(
            "Proposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Proposal {
    const NAME: &'static str = "Proposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block)?;
                },
                16 => {
                    self.islock = is.read_bool()?;
                },
                24 => {
                    self.lock_round = is.read_uint64()?;
                },
                34 => {
                    self.lock_votes.push(is.read_message()?);
                },
                40 => {
                    self.round = is.read_uint64()?;
                },
                48 => {
                    self.height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if self.islock != false {
            my_size += 1 + 1;
        }
        if self.lock_round != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.lock_round);
        }
        for value in &self.lock_votes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        if self.round != 0 {
            my_size += ::protobuf::rt::uint64_size(5, self.round);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if self.islock != false {
            os.write_bool(2, self.islock)?;
        }
        if self.lock_round != 0 {
            os.write_uint64(3, self.lock_round)?;
        }
        for v in &self.lock_votes {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        };
        if self.round != 0 {
            os.write_uint64(5, self.round)?;
        }
        if self.height != 0 {
            os.write_uint64(6, self.height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Proposal {
        Proposal::new()
    }

    fn clear(&mut self) {
        self.block.clear();
        self.islock = false;
        self.lock_round = 0;
        self.lock_votes.clear();
        self.round = 0;
        self.height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Proposal {
        static instance: Proposal = Proposal {
            block: ::protobuf::MessageField::none(),
            islock: false,
            lock_round: 0,
            lock_votes: ::std::vec::Vec::new(),
            round: 0,
            height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Proposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Proposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Proposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Proposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:Vote)
pub struct Vote {
    // message fields
    // @@protoc_insertion_point(field:Vote.sender)
    pub sender: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:Vote.proposal)
    pub proposal: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:Vote.signature)
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:Vote.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Vote {
    fn default() -> &'a Vote {
        <Vote as ::protobuf::Message>::default_instance()
    }
}

impl Vote {
    pub fn new() -> Vote {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sender",
            |m: &Vote| { &m.sender },
            |m: &mut Vote| { &mut m.sender },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "proposal",
            |m: &Vote| { &m.proposal },
            |m: &mut Vote| { &mut m.proposal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &Vote| { &m.signature },
            |m: &mut Vote| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Vote>(
            "Vote",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Vote {
    const NAME: &'static str = "Vote";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.sender = is.read_bytes()?;
                },
                18 => {
                    self.proposal = is.read_bytes()?;
                },
                26 => {
                    self.signature = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.sender.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.sender);
        }
        if !self.proposal.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.proposal);
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.sender.is_empty() {
            os.write_bytes(1, &self.sender)?;
        }
        if !self.proposal.is_empty() {
            os.write_bytes(2, &self.proposal)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(3, &self.signature)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Vote {
        Vote::new()
    }

    fn clear(&mut self) {
        self.sender.clear();
        self.proposal.clear();
        self.signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Vote {
        static instance: Vote = Vote {
            sender: ::std::vec::Vec::new(),
            proposal: ::std::vec::Vec::new(),
            signature: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Vote {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Vote").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Vote {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Vote {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:CompactSignedProposal)
pub struct CompactSignedProposal {
    // message fields
    // @@protoc_insertion_point(field:CompactSignedProposal.proposal)
    pub proposal: ::protobuf::MessageField<CompactProposal>,
    // @@protoc_insertion_point(field:CompactSignedProposal.signature)
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:CompactSignedProposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CompactSignedProposal {
    fn default() -> &'a CompactSignedProposal {
        <CompactSignedProposal as ::protobuf::Message>::default_instance()
    }
}

impl CompactSignedProposal {
    pub fn new() -> CompactSignedProposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, CompactProposal>(
            "proposal",
            |m: &CompactSignedProposal| { &m.proposal },
            |m: &mut CompactSignedProposal| { &mut m.proposal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &CompactSignedProposal| { &m.signature },
            |m: &mut CompactSignedProposal| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CompactSignedProposal>(
            "CompactSignedProposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CompactSignedProposal {
    const NAME: &'static str = "CompactSignedProposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proposal)?;
                },
                18 => {
                    self.signature = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.proposal.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.proposal.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CompactSignedProposal {
        CompactSignedProposal::new()
    }

    fn clear(&mut self) {
        self.proposal.clear();
        self.signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CompactSignedProposal {
        static instance: CompactSignedProposal = CompactSignedProposal {
            proposal: ::protobuf::MessageField::none(),
            signature: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CompactSignedProposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CompactSignedProposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CompactSignedProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompactSignedProposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SignedProposal)
pub struct SignedProposal {
    // message fields
    // @@protoc_insertion_point(field:SignedProposal.proposal)
    pub proposal: ::protobuf::MessageField<Proposal>,
    // @@protoc_insertion_point(field:SignedProposal.signature)
    pub signature: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:SignedProposal.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SignedProposal {
    fn default() -> &'a SignedProposal {
        <SignedProposal as ::protobuf::Message>::default_instance()
    }
}

impl SignedProposal {
    pub fn new() -> SignedProposal {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Proposal>(
            "proposal",
            |m: &SignedProposal| { &m.proposal },
            |m: &mut SignedProposal| { &mut m.proposal },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "signature",
            |m: &SignedProposal| { &m.signature },
            |m: &mut SignedProposal| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SignedProposal>(
            "SignedProposal",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SignedProposal {
    const NAME: &'static str = "SignedProposal";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.proposal)?;
                },
                18 => {
                    self.signature = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.proposal.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.signature);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.proposal.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(2, &self.signature)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SignedProposal {
        SignedProposal::new()
    }

    fn clear(&mut self) {
        self.proposal.clear();
        self.signature.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SignedProposal {
        static instance: SignedProposal = SignedProposal {
            proposal: ::protobuf::MessageField::none(),
            signature: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SignedProposal {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SignedProposal").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SignedProposal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignedProposal {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fconsensus.proto\x1a\x10blockchain.proto\"\xc1\x01\n\x0fCompactProp\
    osal\x12#\n\x05block\x18\x01\x20\x01(\x0b2\r.CompactBlockR\x05block\x12\
    \x16\n\x06islock\x18\x02\x20\x01(\x08R\x06islock\x12\x1d\n\nlock_round\
    \x18\x03\x20\x01(\x04R\tlockRound\x12$\n\nlock_votes\x18\x04\x20\x03(\
    \x0b2\x05.VoteR\tlockVotes\x12\x14\n\x05round\x18\x05\x20\x01(\x04R\x05r\
    ound\x12\x16\n\x06height\x18\x06\x20\x01(\x04R\x06height\"\xb3\x01\n\x08\
    Proposal\x12\x1c\n\x05block\x18\x01\x20\x01(\x0b2\x06.BlockR\x05block\
    \x12\x16\n\x06islock\x18\x02\x20\x01(\x08R\x06islock\x12\x1d\n\nlock_rou\
    nd\x18\x03\x20\x01(\x04R\tlockRound\x12$\n\nlock_votes\x18\x04\x20\x03(\
    \x0b2\x05.VoteR\tlockVotes\x12\x14\n\x05round\x18\x05\x20\x01(\x04R\x05r\
    ound\x12\x16\n\x06height\x18\x06\x20\x01(\x04R\x06height\"X\n\x04Vote\
    \x12\x16\n\x06sender\x18\x01\x20\x01(\x0cR\x06sender\x12\x1a\n\x08propos\
    al\x18\x02\x20\x01(\x0cR\x08proposal\x12\x1c\n\tsignature\x18\x03\x20\
    \x01(\x0cR\tsignature\"c\n\x15CompactSignedProposal\x12,\n\x08proposal\
    \x18\x01\x20\x01(\x0b2\x10.CompactProposalR\x08proposal\x12\x1c\n\tsigna\
    ture\x18\x02\x20\x01(\x0cR\tsignature\"U\n\x0eSignedProposal\x12%\n\x08p\
    roposal\x18\x01\x20\x01(\x0b2\t.ProposalR\x08proposal\x12\x1c\n\tsignatu\
    re\x18\x02\x20\x01(\x0cR\tsignatureJ\xc5\x0b\n\x06\x12\x04\0\0$\x01\n\
    \x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\x07\x19\n\n\n\
    \x02\x04\0\x12\x04\x04\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x17\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x04\x1b\n\r\n\x05\x04\0\x02\0\x04\
    \x12\x04\x05\x04\x04\x19\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x05\x04\x10\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\x11\x16\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x05\x19\x1a\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x04\x14\n\
    \r\n\x05\x04\0\x02\x01\x04\x12\x04\x06\x04\x05\x1b\n\x0c\n\x05\x04\0\x02\
    \x01\x05\x12\x03\x06\x04\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\t\
    \x0f\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x12\x13\n\x0b\n\x04\x04\0\
    \x02\x02\x12\x03\x07\x04\x1a\n\r\n\x05\x04\0\x02\x02\x04\x12\x04\x07\x04\
    \x06\x14\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x04\n\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03\x07\x0b\x15\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x07\x18\x19\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x08\x04!\n\x0c\n\x05\x04\
    \0\x02\x03\x04\x12\x03\x08\x04\x0c\n\x0c\n\x05\x04\0\x02\x03\x06\x12\x03\
    \x08\r\x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x08\x12\x1c\n\x0c\n\x05\
    \x04\0\x02\x03\x03\x12\x03\x08\x1f\x20\n\x0b\n\x04\x04\0\x02\x04\x12\x03\
    \t\x04\x15\n\r\n\x05\x04\0\x02\x04\x04\x12\x04\t\x04\x08!\n\x0c\n\x05\
    \x04\0\x02\x04\x05\x12\x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    \t\x0b\x10\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\t\x13\x14\n\x0b\n\x04\
    \x04\0\x02\x05\x12\x03\n\x04\x16\n\r\n\x05\x04\0\x02\x05\x04\x12\x04\n\
    \x04\t\x15\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\
    \0\x02\x05\x01\x12\x03\n\x0b\x11\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\n\
    \x14\x15\n\n\n\x02\x04\x01\x12\x04\r\0\x14\x01\n\n\n\x03\x04\x01\x01\x12\
    \x03\r\x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0e\x04\x14\n\r\n\x05\
    \x04\x01\x02\0\x04\x12\x04\x0e\x04\r\x12\n\x0c\n\x05\x04\x01\x02\0\x06\
    \x12\x03\x0e\x04\t\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\n\x0f\n\x0c\
    \n\x05\x04\x01\x02\0\x03\x12\x03\x0e\x12\x13\n\x0b\n\x04\x04\x01\x02\x01\
    \x12\x03\x0f\x04\x14\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x0f\x04\x0e\
    \x14\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0f\x04\x08\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03\x0f\t\x0f\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\
    \x03\x0f\x12\x13\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x10\x04\x1a\n\r\n\
    \x05\x04\x01\x02\x02\x04\x12\x04\x10\x04\x0f\x14\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03\x10\x04\n\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03\x10\
    \x0b\x15\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03\x10\x18\x19\n\x0b\n\x04\
    \x04\x01\x02\x03\x12\x03\x11\x04!\n\x0c\n\x05\x04\x01\x02\x03\x04\x12\
    \x03\x11\x04\x0c\n\x0c\n\x05\x04\x01\x02\x03\x06\x12\x03\x11\r\x11\n\x0c\
    \n\x05\x04\x01\x02\x03\x01\x12\x03\x11\x12\x1c\n\x0c\n\x05\x04\x01\x02\
    \x03\x03\x12\x03\x11\x1f\x20\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x12\x04\
    \x15\n\r\n\x05\x04\x01\x02\x04\x04\x12\x04\x12\x04\x11!\n\x0c\n\x05\x04\
    \x01\x02\x04\x05\x12\x03\x12\x04\n\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\
    \x03\x12\x0b\x10\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x12\x13\x14\n\
    \x0b\n\x04\x04\x01\x02\x05\x12\x03\x13\x04\x16\n\r\n\x05\x04\x01\x02\x05\
    \x04\x12\x04\x13\x04\x12\x15\n\x0c\n\x05\x04\x01\x02\x05\x05\x12\x03\x13\
    \x04\n\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x13\x0b\x11\n\x0c\n\x05\
    \x04\x01\x02\x05\x03\x12\x03\x13\x14\x15\n\n\n\x02\x04\x02\x12\x04\x16\0\
    \x1a\x01\n\n\n\x03\x04\x02\x01\x12\x03\x16\x08\x0c\n\x0b\n\x04\x04\x02\
    \x02\0\x12\x03\x17\x04\x15\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x17\x04\
    \x16\x0e\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x17\x04\t\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x17\n\x10\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\
    \x17\x13\x14\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x18\x04\x17\n\r\n\x05\
    \x04\x02\x02\x01\x04\x12\x04\x18\x04\x17\x15\n\x0c\n\x05\x04\x02\x02\x01\
    \x05\x12\x03\x18\x04\t\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x18\n\x12\
    \n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x18\x15\x16\n\x0b\n\x04\x04\x02\
    \x02\x02\x12\x03\x19\x04\x18\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\x19\
    \x04\x18\x17\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x19\x04\t\n\x0c\n\
    \x05\x04\x02\x02\x02\x01\x12\x03\x19\n\x13\n\x0c\n\x05\x04\x02\x02\x02\
    \x03\x12\x03\x19\x16\x17\n\n\n\x02\x04\x03\x12\x04\x1c\0\x1f\x01\n\n\n\
    \x03\x04\x03\x01\x12\x03\x1c\x08\x1d\n\x0b\n\x04\x04\x03\x02\0\x12\x03\
    \x1d\x04!\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x1d\x04\x1c\x1f\n\x0c\n\
    \x05\x04\x03\x02\0\x06\x12\x03\x1d\x04\x13\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03\x1d\x14\x1c\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x1d\x1f\x20\n\
    \x0b\n\x04\x04\x03\x02\x01\x12\x03\x1e\x04\x18\n\r\n\x05\x04\x03\x02\x01\
    \x04\x12\x04\x1e\x04\x1d!\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x1e\
    \x04\t\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x1e\n\x13\n\x0c\n\x05\x04\
    \x03\x02\x01\x03\x12\x03\x1e\x16\x17\n\n\n\x02\x04\x04\x12\x04!\0$\x01\n\
    \n\n\x03\x04\x04\x01\x12\x03!\x08\x16\n\x0b\n\x04\x04\x04\x02\0\x12\x03\
    \"\x04\x1a\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\"\x04!\x18\n\x0c\n\x05\
    \x04\x04\x02\0\x06\x12\x03\"\x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x01\x12\
    \x03\"\r\x15\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\"\x18\x19\n\x0b\n\x04\
    \x04\x04\x02\x01\x12\x03#\x04\x18\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04#\
    \x04\"\x1a\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03#\x04\t\n\x0c\n\x05\
    \x04\x04\x02\x01\x01\x12\x03#\n\x13\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\
    \x03#\x16\x17b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::blockchain::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(5);
            messages.push(CompactProposal::generated_message_descriptor_data());
            messages.push(Proposal::generated_message_descriptor_data());
            messages.push(Vote::generated_message_descriptor_data());
            messages.push(CompactSignedProposal::generated_message_descriptor_data());
            messages.push(SignedProposal::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
